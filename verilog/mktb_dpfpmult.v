//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Mon Dec 11 16:29:15 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mktb_dpfpmult(CLK,
		     RST_N);
  input  CLK;
  input  RST_N;

  // register state
  reg [7 : 0] state;
  wire [7 : 0] state_D_IN;
  wire state_EN;

  // ports of submodule ifc_mult
  reg [127 : 0] ifc_mult_send_data_in;
  wire [69 : 0] ifc_mult_receive;
  wire ifc_mult_EN_send;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_end,
       CAN_FIRE_RL_rl_receive,
       CAN_FIRE_RL_rl_send0,
       CAN_FIRE_RL_rl_send1,
       CAN_FIRE_RL_rl_send2,
       CAN_FIRE_RL_rl_send3,
       WILL_FIRE_RL_rl_end,
       WILL_FIRE_RL_rl_receive,
       WILL_FIRE_RL_rl_send0,
       WILL_FIRE_RL_rl_send1,
       WILL_FIRE_RL_rl_send2,
       WILL_FIRE_RL_rl_send3;

  // submodule ifc_mult
  mk_dpfpmult ifc_mult(.CLK(CLK),
		       .RST_N(RST_N),
		       .send_data_in(ifc_mult_send_data_in),
		       .EN_send(ifc_mult_EN_send),
		       .RDY_send(),
		       .receive(ifc_mult_receive),
		       .RDY_receive());

  // rule RL_rl_receive
  assign CAN_FIRE_RL_rl_receive = 1'd1 ;
  assign WILL_FIRE_RL_rl_receive = 1'd1 ;

  // rule RL_rl_send0
  assign CAN_FIRE_RL_rl_send0 = state == 8'd0 ;
  assign WILL_FIRE_RL_rl_send0 = CAN_FIRE_RL_rl_send0 ;

  // rule RL_rl_send1
  assign CAN_FIRE_RL_rl_send1 = state == 8'd1 ;
  assign WILL_FIRE_RL_rl_send1 = CAN_FIRE_RL_rl_send1 ;

  // rule RL_rl_send2
  assign CAN_FIRE_RL_rl_send2 = state == 8'd2 ;
  assign WILL_FIRE_RL_rl_send2 = CAN_FIRE_RL_rl_send2 ;

  // rule RL_rl_send3
  assign CAN_FIRE_RL_rl_send3 = state == 8'd3 ;
  assign WILL_FIRE_RL_rl_send3 = CAN_FIRE_RL_rl_send3 ;

  // rule RL_rl_end
  assign CAN_FIRE_RL_rl_end = 1'd1 ;
  assign WILL_FIRE_RL_rl_end = 1'd1 ;

  // register state
  assign state_D_IN = state + 8'd1 ;
  assign state_EN = 1'd1 ;

  // submodule ifc_mult
  always@(WILL_FIRE_RL_rl_send1 or
	  WILL_FIRE_RL_rl_send0 or
	  WILL_FIRE_RL_rl_send2 or WILL_FIRE_RL_rl_send3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_send1:
	  ifc_mult_send_data_in = 128'h001FFFFFEFFFFFFFBFE000000FFFFFFF;
      WILL_FIRE_RL_rl_send0:
	  ifc_mult_send_data_in = 128'h7FFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF;
      WILL_FIRE_RL_rl_send2:
	  ifc_mult_send_data_in = 128'h801FFFFFEFFFFFFFBFE000000FFFFFFF;
      WILL_FIRE_RL_rl_send3:
	  ifc_mult_send_data_in = 128'hFFFFFFFFFFFFFFFF40FFFFFFFFFFFFFF;
      default: ifc_mult_send_data_in =
		   128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ifc_mult_EN_send =
	     WILL_FIRE_RL_rl_send1 || WILL_FIRE_RL_rl_send0 ||
	     WILL_FIRE_RL_rl_send2 ||
	     WILL_FIRE_RL_rl_send3 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        state <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (state_EN) state <= `BSV_ASSIGNMENT_DELAY state_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    state = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE) $write("cycle: ", state, " dut result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ifc_mult_receive[68])
	$write("<Float %s%x.%x>",
	       "-",
	       ifc_mult_receive[67:57],
	       ifc_mult_receive[56:5]);
      else
	$write("<Float %s%x.%x>",
	       "+",
	       ifc_mult_receive[67:57],
	       ifc_mult_receive[56:5]);
    if (RST_N != `BSV_RESET_VALUE) $write(" exceptions: ");
    if (RST_N != `BSV_RESET_VALUE) $write("<Exception: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ifc_mult_receive[4]) $write("Invalid_Op ");
    if (RST_N != `BSV_RESET_VALUE) if (!ifc_mult_receive[4]) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (ifc_mult_receive[3]) $write("Divide_0 ");
    if (RST_N != `BSV_RESET_VALUE) if (!ifc_mult_receive[3]) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (ifc_mult_receive[2]) $write("Overflow ");
    if (RST_N != `BSV_RESET_VALUE) if (!ifc_mult_receive[2]) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (ifc_mult_receive[1]) $write("Underflow ");
    if (RST_N != `BSV_RESET_VALUE) if (!ifc_mult_receive[1]) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (ifc_mult_receive[0]) $write("Inexact ");
    if (RST_N != `BSV_RESET_VALUE) if (!ifc_mult_receive[0]) $write("");
    if (RST_N != `BSV_RESET_VALUE) $write(">");
    if (RST_N != `BSV_RESET_VALUE) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send0) $write("cycle:", state, " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send0)
	$write("<Float %s%x.%x>", "+", 11'h7FF, 52'hFFFFFFFFFFFFF);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send0)
	$write("<Float %s%x.%x>", "+", 11'h7FF, 52'hFFFFFFFFFFFFF);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_send0) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send1) $write("cycle:", state, " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send1)
	$write("<Float %s%x.%x>", "+", 11'h001, 52'hFFFFFEFFFFFFF);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send1)
	$write("<Float %s%x.%x>", "-", 11'h3FE, 52'h000000FFFFFFF);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_send1) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send2) $write("cycle:", state, " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send2)
	$write("<Float %s%x.%x>", "-", 11'h001, 52'hFFFFFEFFFFFFF);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send2)
	$write("<Float %s%x.%x>", "-", 11'h3FE, 52'h000000FFFFFFF);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_send2) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send3) $write("cycle:", state, " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send3)
	$write("<Float %s%x.%x>", "-", 11'h7FF, 52'hFFFFFFFFFFFFF);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send3)
	$write("<Float %s%x.%x>", "+", 11'h40F, 52'hFFFFFFFFFFFFF);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_send3) $write("\n");
    if (RST_N != `BSV_RESET_VALUE) if (state > 8'd11) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mktb_dpfpmult

