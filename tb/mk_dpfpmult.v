//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Mon Dec 11 16:25:26 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_send                       O     1 const
// receive                        O    70
// RDY_receive                    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// send_data_in                   I   128 reg
// EN_send                        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_dpfpmult(CLK,
		   RST_N,

		   send_data_in,
		   EN_send,
		   RDY_send,

		   receive,
		   RDY_receive);
  input  CLK;
  input  RST_N;

  // action method send
  input  [127 : 0] send_data_in;
  input  EN_send;
  output RDY_send;

  // value method receive
  output [69 : 0] receive;
  output RDY_receive;

  // signals for module outputs
  wire [69 : 0] receive;
  wire RDY_receive, RDY_send;

  // register i1
  reg [31 : 0] i1;
  wire [31 : 0] i1_D_IN;
  wire i1_EN;

  // register rg_dp_ex0
  reg [2 : 0] rg_dp_ex0;
  wire [2 : 0] rg_dp_ex0_D_IN;
  wire rg_dp_ex0_EN;

  // register rg_dp_ex00
  reg [2 : 0] rg_dp_ex00;
  wire [2 : 0] rg_dp_ex00_D_IN;
  wire rg_dp_ex00_EN;

  // register rg_dp_ex01
  reg [2 : 0] rg_dp_ex01;
  wire [2 : 0] rg_dp_ex01_D_IN;
  wire rg_dp_ex01_EN;

  // register rg_dp_ex02
  reg [2 : 0] rg_dp_ex02;
  wire [2 : 0] rg_dp_ex02_D_IN;
  wire rg_dp_ex02_EN;

  // register rg_dp_ex1
  reg [2 : 0] rg_dp_ex1;
  wire [2 : 0] rg_dp_ex1_D_IN;
  wire rg_dp_ex1_EN;

  // register rg_dp_ex11
  reg [2 : 0] rg_dp_ex11;
  wire [2 : 0] rg_dp_ex11_D_IN;
  wire rg_dp_ex11_EN;

  // register rg_dp_ex2
  reg [2 : 0] rg_dp_ex2;
  wire [2 : 0] rg_dp_ex2_D_IN;
  wire rg_dp_ex2_EN;

  // register rg_dp_ex2_d
  reg [2 : 0] rg_dp_ex2_d;
  wire [2 : 0] rg_dp_ex2_d_D_IN;
  wire rg_dp_ex2_d_EN;

  // register rg_dp_ex3
  reg [2 : 0] rg_dp_ex3;
  wire [2 : 0] rg_dp_ex3_D_IN;
  wire rg_dp_ex3_EN;

  // register rg_dp_ex4
  reg [2 : 0] rg_dp_ex4;
  wire [2 : 0] rg_dp_ex4_D_IN;
  wire rg_dp_ex4_EN;

  // register rg_dp_ex_1
  reg [2 : 0] rg_dp_ex_1;
  wire [2 : 0] rg_dp_ex_1_D_IN;
  wire rg_dp_ex_1_EN;

  // register rg_dp_valid_0
  reg rg_dp_valid_0;
  wire rg_dp_valid_0_D_IN, rg_dp_valid_0_EN;

  // register rg_dp_valid_1
  reg rg_dp_valid_1;
  wire rg_dp_valid_1_D_IN, rg_dp_valid_1_EN;

  // register rg_dp_valid_2
  reg rg_dp_valid_2;
  wire rg_dp_valid_2_D_IN, rg_dp_valid_2_EN;

  // register rg_dp_valid_3
  reg rg_dp_valid_3;
  wire rg_dp_valid_3_D_IN, rg_dp_valid_3_EN;

  // register rg_dp_valid_4
  reg rg_dp_valid_4;
  wire rg_dp_valid_4_D_IN, rg_dp_valid_4_EN;

  // register rg_dp_valid_5
  reg rg_dp_valid_5;
  wire rg_dp_valid_5_D_IN, rg_dp_valid_5_EN;

  // register rg_dp_valid_6
  reg rg_dp_valid_6;
  wire rg_dp_valid_6_D_IN, rg_dp_valid_6_EN;

  // register rg_dp_valid_7
  reg rg_dp_valid_7;
  wire rg_dp_valid_7_D_IN, rg_dp_valid_7_EN;

  // register rg_e0
  reg [49 : 0] rg_e0;
  wire [49 : 0] rg_e0_D_IN;
  wire rg_e0_EN;

  // register rg_e00
  reg [49 : 0] rg_e00;
  wire [49 : 0] rg_e00_D_IN;
  wire rg_e00_EN;

  // register rg_e01
  reg [49 : 0] rg_e01;
  wire [49 : 0] rg_e01_D_IN;
  wire rg_e01_EN;

  // register rg_e011
  reg [49 : 0] rg_e011;
  wire [49 : 0] rg_e011_D_IN;
  wire rg_e011_EN;

  // register rg_e02
  reg [49 : 0] rg_e02;
  wire [49 : 0] rg_e02_D_IN;
  wire rg_e02_EN;

  // register rg_e1
  reg [45 : 0] rg_e1;
  wire [45 : 0] rg_e1_D_IN;
  wire rg_e1_EN;

  // register rg_exc0
  reg [4 : 0] rg_exc0;
  wire [4 : 0] rg_exc0_D_IN;
  wire rg_exc0_EN;

  // register rg_exc1
  reg [4 : 0] rg_exc1;
  wire [4 : 0] rg_exc1_D_IN;
  wire rg_exc1_EN;

  // register rg_exc2
  reg [4 : 0] rg_exc2;
  wire [4 : 0] rg_exc2_D_IN;
  wire rg_exc2_EN;

  // register rg_operands1
  reg [127 : 0] rg_operands1;
  wire [127 : 0] rg_operands1_D_IN;
  wire rg_operands1_EN;

  // register rg_operands10
  reg [127 : 0] rg_operands10;
  wire [127 : 0] rg_operands10_D_IN;
  wire rg_operands10_EN;

  // register rg_operands11
  reg [127 : 0] rg_operands11;
  wire [127 : 0] rg_operands11_D_IN;
  wire rg_operands11_EN;

  // register rg_operands2
  reg [127 : 0] rg_operands2;
  wire [127 : 0] rg_operands2_D_IN;
  wire rg_operands2_EN;

  // register rg_operands3
  reg [127 : 0] rg_operands3;
  wire [127 : 0] rg_operands3_D_IN;
  wire rg_operands3_EN;

  // register rg_operands3_1
  reg [127 : 0] rg_operands3_1;
  wire [127 : 0] rg_operands3_1_D_IN;
  wire rg_operands3_1_EN;

  // register rg_operands4
  reg [127 : 0] rg_operands4;
  wire [127 : 0] rg_operands4_D_IN;
  wire rg_operands4_EN;

  // register rg_operands5
  reg [127 : 0] rg_operands5;
  wire [127 : 0] rg_operands5_D_IN;
  wire rg_operands5_EN;

  // register rg_operands6
  reg [127 : 0] rg_operands6;
  wire [127 : 0] rg_operands6_D_IN;
  wire rg_operands6_EN;

  // register rg_operands7
  reg [127 : 0] rg_operands7;
  wire [127 : 0] rg_operands7_D_IN;
  wire rg_operands7_EN;

  // register rg_operands8
  reg [127 : 0] rg_operands8;
  wire [127 : 0] rg_operands8_D_IN;
  wire rg_operands8_EN;

  // register rg_operands9
  reg [127 : 0] rg_operands9;
  wire [127 : 0] rg_operands9_D_IN;
  wire rg_operands9_EN;

  // register rg_out
  reg [68 : 0] rg_out;
  wire [68 : 0] rg_out_D_IN;
  wire rg_out_EN;

  // register rg_out_1
  reg [68 : 0] rg_out_1;
  wire [68 : 0] rg_out_1_D_IN;
  wire rg_out_1_EN;

  // register rg_out_2
  reg [68 : 0] rg_out_2;
  wire [68 : 0] rg_out_2_D_IN;
  wire rg_out_2_EN;

  // register rg_out_3
  reg [68 : 0] rg_out_3;
  wire [68 : 0] rg_out_3_D_IN;
  wire rg_out_3_EN;

  // register rg_out_d
  reg [68 : 0] rg_out_d;
  wire [68 : 0] rg_out_d_D_IN;
  wire rg_out_d_EN;

  // register rg_partial_product0
  reg [107 : 0] rg_partial_product0;
  wire [107 : 0] rg_partial_product0_D_IN;
  wire rg_partial_product0_EN;

  // register rg_partial_product0_01
  reg [107 : 0] rg_partial_product0_01;
  wire [107 : 0] rg_partial_product0_01_D_IN;
  wire rg_partial_product0_01_EN;

  // register rg_partial_product0_1
  reg [215 : 0] rg_partial_product0_1;
  wire [215 : 0] rg_partial_product0_1_D_IN;
  wire rg_partial_product0_1_EN;

  // register rg_partial_product1
  reg [107 : 0] rg_partial_product1;
  wire [107 : 0] rg_partial_product1_D_IN;
  wire rg_partial_product1_EN;

  // register rg_partial_product1_1
  reg [215 : 0] rg_partial_product1_1;
  wire [215 : 0] rg_partial_product1_1_D_IN;
  wire rg_partial_product1_1_EN;

  // register rg_partial_product1_11
  reg [107 : 0] rg_partial_product1_11;
  wire [107 : 0] rg_partial_product1_11_D_IN;
  wire rg_partial_product1_11_EN;

  // register rg_partial_product2
  reg [107 : 0] rg_partial_product2;
  wire [107 : 0] rg_partial_product2_D_IN;
  wire rg_partial_product2_EN;

  // register rg_partial_product2_1
  reg [215 : 0] rg_partial_product2_1;
  wire [215 : 0] rg_partial_product2_1_D_IN;
  wire rg_partial_product2_1_EN;

  // register rg_partial_product2_21
  reg [107 : 0] rg_partial_product2_21;
  wire [107 : 0] rg_partial_product2_21_D_IN;
  wire rg_partial_product2_21_EN;

  // register rg_partial_product3
  reg [107 : 0] rg_partial_product3;
  wire [107 : 0] rg_partial_product3_D_IN;
  wire rg_partial_product3_EN;

  // register rg_partial_product3_1
  reg [215 : 0] rg_partial_product3_1;
  wire [215 : 0] rg_partial_product3_1_D_IN;
  wire rg_partial_product3_1_EN;

  // register rg_partial_product3_31
  reg [107 : 0] rg_partial_product3_31;
  wire [107 : 0] rg_partial_product3_31_D_IN;
  wire rg_partial_product3_31_EN;

  // register rg_partial_product4
  reg [107 : 0] rg_partial_product4;
  wire [107 : 0] rg_partial_product4_D_IN;
  wire rg_partial_product4_EN;

  // register rg_partial_product4_1
  reg [215 : 0] rg_partial_product4_1;
  wire [215 : 0] rg_partial_product4_1_D_IN;
  wire rg_partial_product4_1_EN;

  // register rg_partial_product4_41
  reg [107 : 0] rg_partial_product4_41;
  wire [107 : 0] rg_partial_product4_41_D_IN;
  wire rg_partial_product4_41_EN;

  // register rg_partial_product5
  reg [107 : 0] rg_partial_product5;
  wire [107 : 0] rg_partial_product5_D_IN;
  wire rg_partial_product5_EN;

  // register rg_partial_product5_1
  reg [215 : 0] rg_partial_product5_1;
  wire [215 : 0] rg_partial_product5_1_D_IN;
  wire rg_partial_product5_1_EN;

  // register rg_partial_product5_2
  reg [107 : 0] rg_partial_product5_2;
  wire [107 : 0] rg_partial_product5_2_D_IN;
  wire rg_partial_product5_2_EN;

  // register rg_partial_product5_51
  reg [107 : 0] rg_partial_product5_51;
  wire [107 : 0] rg_partial_product5_51_D_IN;
  wire rg_partial_product5_51_EN;

  // register rg_partial_product6
  reg [107 : 0] rg_partial_product6;
  wire [107 : 0] rg_partial_product6_D_IN;
  wire rg_partial_product6_EN;

  // register rg_partial_product6_1
  reg [215 : 0] rg_partial_product6_1;
  wire [215 : 0] rg_partial_product6_1_D_IN;
  wire rg_partial_product6_1_EN;

  // register rg_partial_product6_2
  reg [107 : 0] rg_partial_product6_2;
  wire [107 : 0] rg_partial_product6_2_D_IN;
  wire rg_partial_product6_2_EN;

  // register rg_partial_product6_61
  reg [107 : 0] rg_partial_product6_61;
  wire [107 : 0] rg_partial_product6_61_D_IN;
  wire rg_partial_product6_61_EN;

  // register rg_partial_product7
  reg [107 : 0] rg_partial_product7;
  wire [107 : 0] rg_partial_product7_D_IN;
  wire rg_partial_product7_EN;

  // register rg_partial_product7_1
  reg [215 : 0] rg_partial_product7_1;
  wire [215 : 0] rg_partial_product7_1_D_IN;
  wire rg_partial_product7_1_EN;

  // register rg_partial_product7_2
  reg [107 : 0] rg_partial_product7_2;
  wire [107 : 0] rg_partial_product7_2_D_IN;
  wire rg_partial_product7_2_EN;

  // register rg_partial_product7_71
  reg [107 : 0] rg_partial_product7_71;
  wire [107 : 0] rg_partial_product7_71_D_IN;
  wire rg_partial_product7_71_EN;

  // register rg_partial_product8
  reg [107 : 0] rg_partial_product8;
  wire [107 : 0] rg_partial_product8_D_IN;
  wire rg_partial_product8_EN;

  // register rg_partial_product8_1
  reg [215 : 0] rg_partial_product8_1;
  wire [215 : 0] rg_partial_product8_1_D_IN;
  wire rg_partial_product8_1_EN;

  // register rg_partial_product8_2
  reg [107 : 0] rg_partial_product8_2;
  wire [107 : 0] rg_partial_product8_2_D_IN;
  wire rg_partial_product8_2_EN;

  // register rg_partial_product8_81
  reg [107 : 0] rg_partial_product8_81;
  wire [107 : 0] rg_partial_product8_81_D_IN;
  wire rg_partial_product8_81_EN;

  // register rg_res
  reg [107 : 0] rg_res;
  wire [107 : 0] rg_res_D_IN;
  wire rg_res_EN;

  // register rg_res1
  reg [107 : 0] rg_res1;
  wire [107 : 0] rg_res1_D_IN;
  wire rg_res1_EN;

  // register rg_res11
  reg [107 : 0] rg_res11;
  wire [107 : 0] rg_res11_D_IN;
  wire rg_res11_EN;

  // register rg_s0
  reg rg_s0;
  wire rg_s0_D_IN, rg_s0_EN;

  // register rg_s00
  reg rg_s00;
  wire rg_s00_D_IN, rg_s00_EN;

  // register rg_s01
  reg rg_s01;
  wire rg_s01_D_IN, rg_s01_EN;

  // register rg_s02
  reg rg_s02;
  wire rg_s02_D_IN, rg_s02_EN;

  // register rg_s1
  reg rg_s1;
  wire rg_s1_D_IN, rg_s1_EN;

  // register rg_s11
  reg rg_s11;
  wire rg_s11_D_IN, rg_s11_EN;

  // register rg_x0
  reg [123 : 0] rg_x0;
  wire [123 : 0] rg_x0_D_IN;
  wire rg_x0_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rg_dp_valid_0__dreg_update,
       CAN_FIRE_RL_rg_dp_valid_1__dreg_update,
       CAN_FIRE_RL_rg_dp_valid_2__dreg_update,
       CAN_FIRE_RL_rg_dp_valid_3__dreg_update,
       CAN_FIRE_RL_rg_dp_valid_4__dreg_update,
       CAN_FIRE_RL_rg_dp_valid_5__dreg_update,
       CAN_FIRE_RL_rg_dp_valid_6__dreg_update,
       CAN_FIRE_RL_rg_dp_valid_7__dreg_update,
       CAN_FIRE_RL_rl_exponent_evaluate_stage1,
       CAN_FIRE_RL_rl_special_exception_check_stage1,
       CAN_FIRE_RL_rl_stage1,
       CAN_FIRE_RL_rl_stage2,
       CAN_FIRE_RL_rl_stage3,
       CAN_FIRE_RL_rl_stage4,
       CAN_FIRE_RL_rl_stage5,
       CAN_FIRE_RL_rl_stage6,
       CAN_FIRE_RL_rl_stage7,
       CAN_FIRE_RL_rl_valid_check,
       CAN_FIRE_send,
       WILL_FIRE_RL_rg_dp_valid_0__dreg_update,
       WILL_FIRE_RL_rg_dp_valid_1__dreg_update,
       WILL_FIRE_RL_rg_dp_valid_2__dreg_update,
       WILL_FIRE_RL_rg_dp_valid_3__dreg_update,
       WILL_FIRE_RL_rg_dp_valid_4__dreg_update,
       WILL_FIRE_RL_rg_dp_valid_5__dreg_update,
       WILL_FIRE_RL_rg_dp_valid_6__dreg_update,
       WILL_FIRE_RL_rg_dp_valid_7__dreg_update,
       WILL_FIRE_RL_rl_exponent_evaluate_stage1,
       WILL_FIRE_RL_rl_special_exception_check_stage1,
       WILL_FIRE_RL_rl_stage1,
       WILL_FIRE_RL_rl_stage2,
       WILL_FIRE_RL_rl_stage3,
       WILL_FIRE_RL_rl_stage4,
       WILL_FIRE_RL_rl_stage5,
       WILL_FIRE_RL_rl_stage6,
       WILL_FIRE_RL_rl_stage7,
       WILL_FIRE_RL_rl_valid_check,
       WILL_FIRE_send;

  // remaining internal signals
  reg [62 : 0] IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS__ETC___d1063;
  reg [51 : 0] CASE_rg_dp_ex2_d_0b1_0_0b10_0_0b100_2251799813_ETC__q2;
  reg [10 : 0] CASE_rg_dp_ex2_d_0b1_0_0b10_2047_0b100_2047_2047__q1;
  reg IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS__ETC___d1092;
  wire [107 : 0] IF_rg_e011_59_BIT_3_68_THEN_IF_rg_e011_59_BITS_ETC___d901,
		 IF_rg_e011_BITS_49_TO_39_EQ_0_THEN_result19726_ETC__q15,
		 result__h1197263,
		 rg_partial_product1_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q7,
		 rg_partial_product2_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q8,
		 rg_partial_product3_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q9,
		 rg_partial_product4_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q10,
		 rg_partial_product5_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q11,
		 rg_partial_product6_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q12,
		 rg_partial_product7_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q13,
		 rg_partial_product8_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q14,
		 rg_res11_88_SRL_IF_rg_e011_59_BITS_38_TO_7_71__ETC___d897,
		 rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THEN_D_ETC___d910,
		 x01__h1197204,
		 x02__h1197205,
		 x__h1197741,
		 x__h9362,
		 x__h9363,
		 x__h9364,
		 x__h9649,
		 x__h9650,
		 x__h9651,
		 x_out0__h1197208,
		 x_out1__h1197211,
		 x_out__h1197213;
  wire [62 : 0] IF_0b0_CONCAT_NOT_rg_x0_99_BITS_17_TO_7_020_EQ_ETC___d1054,
		IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BIT_7_ETC___d1055;
  wire [59 : 0] a__h6007,
		res1__h6015,
		res1__h6306,
		res1__h6562,
		res1__h6818,
		res1__h7074,
		res1__h7330,
		res1__h7586,
		res1__h7842,
		res1__h8098,
		res2__h6016,
		res2__h6307,
		res2__h6563,
		res2__h6819,
		res2__h7075,
		res2__h7331,
		res2__h7587,
		res2__h7843,
		res2__h8099,
		res3__h6017,
		res3__h6308,
		res3__h6564,
		res3__h6820,
		res3__h7076,
		res3__h7332,
		res3__h7588,
		res3__h7844,
		res3__h8100,
		res4__h6018,
		res4__h6309,
		res4__h6565,
		res4__h6821,
		res4__h7077,
		res4__h7333,
		res4__h7589,
		res4__h7845,
		res4__h8101,
		res5__h6019,
		res5__h6310,
		res5__h6566,
		res5__h6822,
		res5__h7078,
		res5__h7334,
		res5__h7590,
		res5__h7846,
		res5__h8102,
		res6__h6020,
		res6__h6311,
		res6__h6567,
		res6__h6823,
		res6__h7079,
		res6__h7335,
		res6__h7591,
		res6__h7847,
		x__h6042,
		x__h6189,
		x__h6333,
		x__h6443,
		x__h6589,
		x__h6699,
		x__h6845,
		x__h6955,
		x__h7101,
		x__h7211,
		x__h7357,
		x__h7467,
		x__h7613,
		x__h7723,
		x__h7869,
		x__h7979,
		x__h8125,
		y1__h6022,
		y1__h6313,
		y1__h6569,
		y1__h6825,
		y1__h7081,
		y1__h7337,
		y1__h7593,
		y1__h7849,
		y1__h8105,
		y__h6021,
		y__h6312,
		y__h6568,
		y__h6824,
		y__h7080,
		y__h7336,
		y__h7592,
		y__h7848,
		y__h8104;
  wire [53 : 0] sfd_res__h1198858;
  wire [51 : 0] sfd__h1198856;
  wire [50 : 0] x__h1198458, x__h1198708;
  wire [31 : 0] i1_75_MINUS_1___d881, x__h1197636, x__h1197774;
  wire [12 : 0] IF_0_CONCAT_IF_rg_operands1_3_BITS_126_TO_116__ETC__q4,
		e__h4759,
		x__h4806,
		x__h4808,
		y__h4809;
  wire [11 : 0] x__h4945;
  wire [10 : 0] IF_i1_75_EQ_0_76_THEN_IF_rg_e011_59_BITS_49_TO_ETC___d933,
		_theResult___fst__h1199354,
		e11__h4756,
		e22__h4757,
		exp1__h1197206,
		exp2__h1197207,
		exp_out__h1197212,
		exp_out__h1199342,
		x__h1197481,
		x__h1197886,
		x__h4751;
  wire [4 : 0] IF_rg_operands1_3_BITS_126_TO_116_4_EQ_2047_5__ETC___d66,
	       x__h1197895,
	       x__h4974;
  wire [2 : 0] guard__h1198855;
  wire [1 : 0] IF_rg_e011_59_BITS_49_TO_39_64_EQ_0_65_OR_i1_7_ETC___d985,
	       IF_rg_operands1_3_BITS_126_TO_116_4_EQ_0_5_AND_ETC___d75,
	       IF_rg_res11_88_SRL_IF_rg_e011_59_BITS_38_TO_7__ETC__q5,
	       IF_rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THE_ETC__q6,
	       IF_rg_x0_BIT_123_THEN_rg_x0_BIT_69_CONCAT_NOT__ETC__q3,
	       guard_s__h1197221,
	       result__h1198182,
	       x__h1198633,
	       x__h1199640,
	       x__h5390;
  wire IF_NOT_rg_e011_59_BIT_0_66_67_AND_rg_e011_59_B_ETC___d974,
       IF_rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_ETC___d133,
       IF_rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_ETC___d151,
       IF_rg_x0_99_BIT_123_001_THEN_NOT_rg_x0_99_BIT__ETC___d1037,
       IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS_70__ETC___d1121,
       IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BIT_71_0_ETC___d1028,
       IF_rg_x0_99_BIT_3_067_THEN_IF_rg_x0_99_BIT_123_ETC___d1123,
       IF_rg_x0_99_BIT_3_067_THEN_rg_exc2_069_BIT_2_0_ETC___d1096,
       IF_rg_x0_99_BIT_4_066_OR_rg_x0_99_BIT_3_067_06_ETC___d1075,
       _0_CONCAT_IF_rg_operands1_3_BITS_126_TO_116_4_E_ETC___d46,
       _theResult_____1_snd_snd__h1199427,
       _theResult_____1_snd_snd__h1199441,
       a_inf__h5473,
       a_qnan__h5481,
       a_snan__h5477,
       a_z__h5475,
       b_inf__h5474,
       b_qnan__h5482,
       b_snan__h5478,
       b_z__h5476,
       e_xo__h1199235,
       grd__h1197227,
       i1_75_MINUS_1_81_SLE_0_CONCAT_rg_e011_59_BITS__ETC___d927,
       i1_75_MINUS_1_81_SLE_0___d882,
       inf__h5485,
       nan__h5487,
       qnan__h5484,
       qnan_valid__h5483,
       rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_rg_ETC___d100,
       rg_operands2_9_BITS_126_TO_116_0_EQ_2047_04_AN_ETC___d131,
       rg_operands2_9_BITS_126_TO_116_0_EQ_2047_04_AN_ETC___d143,
       rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THEN_D_ETC___d921,
       sfd_prec__h1197214,
       snan__h5480,
       snan_valid__h5479,
       x__h1199375,
       x__h1199377,
       x__h5734,
       x__h5736,
       x__h5738,
       x__h5740,
       x__h5742,
       x__h5906,
       x__h5908,
       x__h5910,
       y__h1199378,
       y__h5735,
       y__h5737,
       y__h5739,
       y__h5741,
       y__h5743,
       y__h5907,
       y__h5909,
       y__h5911,
       zero__h5486;

  // action method send
  assign RDY_send = 1'd1 ;
  assign CAN_FIRE_send = 1'd1 ;
  assign WILL_FIRE_send = EN_send ;

  // value method receive
  assign receive =
	     { rg_dp_valid_7,
	       (rg_dp_ex2_d == 3'b0) ?
		 rg_out_d[68:5] :
		 { (rg_dp_ex2_d == 3'b010 || rg_dp_ex2_d == 3'b001) &&
		   rg_out_d[68],
		   CASE_rg_dp_ex2_d_0b1_0_0b10_2047_0b100_2047_2047__q1,
		   CASE_rg_dp_ex2_d_0b1_0_0b10_0_0b100_2251799813_ETC__q2 },
	       (rg_dp_ex2_d == 3'b0) ? rg_out_d[4] : rg_dp_ex2_d == 3'b100,
	       rg_dp_ex2_d == 3'b0 && rg_out_d[3],
	       rg_dp_ex2_d == 3'b0 && rg_out_d[2],
	       rg_dp_ex2_d == 3'b0 && rg_out_d[1],
	       rg_dp_ex2_d == 3'b0 && rg_out_d[0] } ;
  assign RDY_receive = 1'd1 ;

  // rule RL_rl_stage7
  assign CAN_FIRE_RL_rl_stage7 = 1'd1 ;
  assign WILL_FIRE_RL_rl_stage7 = 1'd1 ;

  // rule RL_rl_stage6
  assign CAN_FIRE_RL_rl_stage6 = 1'd1 ;
  assign WILL_FIRE_RL_rl_stage6 = 1'd1 ;

  // rule RL_rl_stage5
  assign CAN_FIRE_RL_rl_stage5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_stage5 = 1'd1 ;

  // rule RL_rl_stage4
  assign CAN_FIRE_RL_rl_stage4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_stage4 = 1'd1 ;

  // rule RL_rl_stage3
  assign CAN_FIRE_RL_rl_stage3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_stage3 = 1'd1 ;

  // rule RL_rl_stage2
  assign CAN_FIRE_RL_rl_stage2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_stage2 = 1'd1 ;

  // rule RL_rl_exponent_evaluate_stage1
  assign CAN_FIRE_RL_rl_exponent_evaluate_stage1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_exponent_evaluate_stage1 = 1'd1 ;

  // rule RL_rl_special_exception_check_stage1
  assign CAN_FIRE_RL_rl_special_exception_check_stage1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_special_exception_check_stage1 = 1'd1 ;

  // rule RL_rl_stage1
  assign CAN_FIRE_RL_rl_stage1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_stage1 = 1'd1 ;

  // rule RL_rl_valid_check
  assign CAN_FIRE_RL_rl_valid_check = 1'd1 ;
  assign WILL_FIRE_RL_rl_valid_check = 1'd1 ;

  // rule RL_rg_dp_valid_0__dreg_update
  assign CAN_FIRE_RL_rg_dp_valid_0__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_dp_valid_0__dreg_update = 1'd1 ;

  // rule RL_rg_dp_valid_1__dreg_update
  assign CAN_FIRE_RL_rg_dp_valid_1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_dp_valid_1__dreg_update = 1'd1 ;

  // rule RL_rg_dp_valid_2__dreg_update
  assign CAN_FIRE_RL_rg_dp_valid_2__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_dp_valid_2__dreg_update = 1'd1 ;

  // rule RL_rg_dp_valid_3__dreg_update
  assign CAN_FIRE_RL_rg_dp_valid_3__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_dp_valid_3__dreg_update = 1'd1 ;

  // rule RL_rg_dp_valid_4__dreg_update
  assign CAN_FIRE_RL_rg_dp_valid_4__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_dp_valid_4__dreg_update = 1'd1 ;

  // rule RL_rg_dp_valid_5__dreg_update
  assign CAN_FIRE_RL_rg_dp_valid_5__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_dp_valid_5__dreg_update = 1'd1 ;

  // rule RL_rg_dp_valid_6__dreg_update
  assign CAN_FIRE_RL_rg_dp_valid_6__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_dp_valid_6__dreg_update = 1'd1 ;

  // rule RL_rg_dp_valid_7__dreg_update
  assign CAN_FIRE_RL_rg_dp_valid_7__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_dp_valid_7__dreg_update = 1'd1 ;

  // register i1
  assign i1_D_IN =
	     (rg_res1[105:96] == 10'd0) ?
	       ((rg_res1[95:80] == 16'd0) ?
		  ((rg_res1[79:64] == 16'd0) ?
		     ((rg_res1[63:48] == 16'd0) ?
			((rg_res1[47:32] == 16'd0) ?
			   ((rg_res1[31:16] == 16'd0) ?
			      ((rg_res1[15:0] == 16'd0) ?
				 32'd106 :
				 ((!rg_res1[1] && !rg_res1[2] &&
				   !rg_res1[3] &&
				   !rg_res1[4] &&
				   !rg_res1[5] &&
				   !rg_res1[6] &&
				   !rg_res1[7] &&
				   !rg_res1[8] &&
				   !rg_res1[9] &&
				   !rg_res1[10] &&
				   !rg_res1[11] &&
				   !rg_res1[12] &&
				   !rg_res1[13] &&
				   !rg_res1[14] &&
				   !rg_res1[15]) ?
				    32'd105 :
				    ((!rg_res1[2] && !rg_res1[3] &&
				      !rg_res1[4] &&
				      !rg_res1[5] &&
				      !rg_res1[6] &&
				      !rg_res1[7] &&
				      !rg_res1[8] &&
				      !rg_res1[9] &&
				      !rg_res1[10] &&
				      !rg_res1[11] &&
				      !rg_res1[12] &&
				      !rg_res1[13] &&
				      !rg_res1[14] &&
				      !rg_res1[15]) ?
				       32'd104 :
				       ((!rg_res1[3] && !rg_res1[4] &&
					 !rg_res1[5] &&
					 !rg_res1[6] &&
					 !rg_res1[7] &&
					 !rg_res1[8] &&
					 !rg_res1[9] &&
					 !rg_res1[10] &&
					 !rg_res1[11] &&
					 !rg_res1[12] &&
					 !rg_res1[13] &&
					 !rg_res1[14] &&
					 !rg_res1[15]) ?
					  32'd103 :
					  ((!rg_res1[4] && !rg_res1[5] &&
					    !rg_res1[6] &&
					    !rg_res1[7] &&
					    !rg_res1[8] &&
					    !rg_res1[9] &&
					    !rg_res1[10] &&
					    !rg_res1[11] &&
					    !rg_res1[12] &&
					    !rg_res1[13] &&
					    !rg_res1[14] &&
					    !rg_res1[15]) ?
					     32'd102 :
					     ((!rg_res1[5] && !rg_res1[6] &&
					       !rg_res1[7] &&
					       !rg_res1[8] &&
					       !rg_res1[9] &&
					       !rg_res1[10] &&
					       !rg_res1[11] &&
					       !rg_res1[12] &&
					       !rg_res1[13] &&
					       !rg_res1[14] &&
					       !rg_res1[15]) ?
						32'd101 :
						((!rg_res1[6] &&
						  !rg_res1[7] &&
						  !rg_res1[8] &&
						  !rg_res1[9] &&
						  !rg_res1[10] &&
						  !rg_res1[11] &&
						  !rg_res1[12] &&
						  !rg_res1[13] &&
						  !rg_res1[14] &&
						  !rg_res1[15]) ?
						   32'd100 :
						   ((!rg_res1[7] &&
						     !rg_res1[8] &&
						     !rg_res1[9] &&
						     !rg_res1[10] &&
						     !rg_res1[11] &&
						     !rg_res1[12] &&
						     !rg_res1[13] &&
						     !rg_res1[14] &&
						     !rg_res1[15]) ?
						      32'd99 :
						      ((!rg_res1[8] &&
							!rg_res1[9] &&
							!rg_res1[10] &&
							!rg_res1[11] &&
							!rg_res1[12] &&
							!rg_res1[13] &&
							!rg_res1[14] &&
							!rg_res1[15]) ?
							 32'd98 :
							 ((!rg_res1[9] &&
							   !rg_res1[10] &&
							   !rg_res1[11] &&
							   !rg_res1[12] &&
							   !rg_res1[13] &&
							   !rg_res1[14] &&
							   !rg_res1[15]) ?
							    32'd97 :
							    ((!rg_res1[10] &&
							      !rg_res1[11] &&
							      !rg_res1[12] &&
							      !rg_res1[13] &&
							      !rg_res1[14] &&
							      !rg_res1[15]) ?
							       32'd96 :
							       ((!rg_res1[11] &&
								 !rg_res1[12] &&
								 !rg_res1[13] &&
								 !rg_res1[14] &&
								 !rg_res1[15]) ?
								  32'd95 :
								  ((!rg_res1[12] &&
								    !rg_res1[13] &&
								    !rg_res1[14] &&
								    !rg_res1[15]) ?
								     32'd94 :
								     ((!rg_res1[13] &&
								       !rg_res1[14] &&
								       !rg_res1[15]) ?
									32'd93 :
									((!rg_res1[14] &&
									  !rg_res1[15]) ?
									   32'd92 :
									   (rg_res1[15] ?
									      32'd90 :
									      32'd91)))))))))))))))) :
			      ((!rg_res1[16] && !rg_res1[17] &&
				!rg_res1[18] &&
				!rg_res1[19] &&
				!rg_res1[20] &&
				!rg_res1[21] &&
				!rg_res1[22] &&
				!rg_res1[23] &&
				!rg_res1[24] &&
				!rg_res1[25] &&
				!rg_res1[26] &&
				!rg_res1[27] &&
				!rg_res1[28] &&
				!rg_res1[29] &&
				!rg_res1[30] &&
				!rg_res1[31]) ?
				 32'd90 :
				 ((!rg_res1[17] && !rg_res1[18] &&
				   !rg_res1[19] &&
				   !rg_res1[20] &&
				   !rg_res1[21] &&
				   !rg_res1[22] &&
				   !rg_res1[23] &&
				   !rg_res1[24] &&
				   !rg_res1[25] &&
				   !rg_res1[26] &&
				   !rg_res1[27] &&
				   !rg_res1[28] &&
				   !rg_res1[29] &&
				   !rg_res1[30] &&
				   !rg_res1[31]) ?
				    32'd89 :
				    ((!rg_res1[18] && !rg_res1[19] &&
				      !rg_res1[20] &&
				      !rg_res1[21] &&
				      !rg_res1[22] &&
				      !rg_res1[23] &&
				      !rg_res1[24] &&
				      !rg_res1[25] &&
				      !rg_res1[26] &&
				      !rg_res1[27] &&
				      !rg_res1[28] &&
				      !rg_res1[29] &&
				      !rg_res1[30] &&
				      !rg_res1[31]) ?
				       32'd88 :
				       ((!rg_res1[19] && !rg_res1[20] &&
					 !rg_res1[21] &&
					 !rg_res1[22] &&
					 !rg_res1[23] &&
					 !rg_res1[24] &&
					 !rg_res1[25] &&
					 !rg_res1[26] &&
					 !rg_res1[27] &&
					 !rg_res1[28] &&
					 !rg_res1[29] &&
					 !rg_res1[30] &&
					 !rg_res1[31]) ?
					  32'd87 :
					  ((!rg_res1[20] && !rg_res1[21] &&
					    !rg_res1[22] &&
					    !rg_res1[23] &&
					    !rg_res1[24] &&
					    !rg_res1[25] &&
					    !rg_res1[26] &&
					    !rg_res1[27] &&
					    !rg_res1[28] &&
					    !rg_res1[29] &&
					    !rg_res1[30] &&
					    !rg_res1[31]) ?
					     32'd86 :
					     ((!rg_res1[21] && !rg_res1[22] &&
					       !rg_res1[23] &&
					       !rg_res1[24] &&
					       !rg_res1[25] &&
					       !rg_res1[26] &&
					       !rg_res1[27] &&
					       !rg_res1[28] &&
					       !rg_res1[29] &&
					       !rg_res1[30] &&
					       !rg_res1[31]) ?
						32'd85 :
						((!rg_res1[22] &&
						  !rg_res1[23] &&
						  !rg_res1[24] &&
						  !rg_res1[25] &&
						  !rg_res1[26] &&
						  !rg_res1[27] &&
						  !rg_res1[28] &&
						  !rg_res1[29] &&
						  !rg_res1[30] &&
						  !rg_res1[31]) ?
						   32'd84 :
						   ((!rg_res1[23] &&
						     !rg_res1[24] &&
						     !rg_res1[25] &&
						     !rg_res1[26] &&
						     !rg_res1[27] &&
						     !rg_res1[28] &&
						     !rg_res1[29] &&
						     !rg_res1[30] &&
						     !rg_res1[31]) ?
						      32'd83 :
						      ((!rg_res1[24] &&
							!rg_res1[25] &&
							!rg_res1[26] &&
							!rg_res1[27] &&
							!rg_res1[28] &&
							!rg_res1[29] &&
							!rg_res1[30] &&
							!rg_res1[31]) ?
							 32'd82 :
							 ((!rg_res1[25] &&
							   !rg_res1[26] &&
							   !rg_res1[27] &&
							   !rg_res1[28] &&
							   !rg_res1[29] &&
							   !rg_res1[30] &&
							   !rg_res1[31]) ?
							    32'd81 :
							    ((!rg_res1[26] &&
							      !rg_res1[27] &&
							      !rg_res1[28] &&
							      !rg_res1[29] &&
							      !rg_res1[30] &&
							      !rg_res1[31]) ?
							       32'd80 :
							       ((!rg_res1[27] &&
								 !rg_res1[28] &&
								 !rg_res1[29] &&
								 !rg_res1[30] &&
								 !rg_res1[31]) ?
								  32'd79 :
								  ((!rg_res1[28] &&
								    !rg_res1[29] &&
								    !rg_res1[30] &&
								    !rg_res1[31]) ?
								     32'd78 :
								     ((!rg_res1[29] &&
								       !rg_res1[30] &&
								       !rg_res1[31]) ?
									32'd77 :
									((!rg_res1[30] &&
									  !rg_res1[31]) ?
									   32'd76 :
									   (rg_res1[31] ?
									      32'd74 :
									      32'd75))))))))))))))))) :
			   ((!rg_res1[32] && !rg_res1[33] && !rg_res1[34] &&
			     !rg_res1[35] &&
			     !rg_res1[36] &&
			     !rg_res1[37] &&
			     !rg_res1[38] &&
			     !rg_res1[39] &&
			     !rg_res1[40] &&
			     !rg_res1[41] &&
			     !rg_res1[42] &&
			     !rg_res1[43] &&
			     !rg_res1[44] &&
			     !rg_res1[45] &&
			     !rg_res1[46] &&
			     !rg_res1[47]) ?
			      32'd74 :
			      ((!rg_res1[33] && !rg_res1[34] &&
				!rg_res1[35] &&
				!rg_res1[36] &&
				!rg_res1[37] &&
				!rg_res1[38] &&
				!rg_res1[39] &&
				!rg_res1[40] &&
				!rg_res1[41] &&
				!rg_res1[42] &&
				!rg_res1[43] &&
				!rg_res1[44] &&
				!rg_res1[45] &&
				!rg_res1[46] &&
				!rg_res1[47]) ?
				 32'd73 :
				 ((!rg_res1[34] && !rg_res1[35] &&
				   !rg_res1[36] &&
				   !rg_res1[37] &&
				   !rg_res1[38] &&
				   !rg_res1[39] &&
				   !rg_res1[40] &&
				   !rg_res1[41] &&
				   !rg_res1[42] &&
				   !rg_res1[43] &&
				   !rg_res1[44] &&
				   !rg_res1[45] &&
				   !rg_res1[46] &&
				   !rg_res1[47]) ?
				    32'd72 :
				    ((!rg_res1[35] && !rg_res1[36] &&
				      !rg_res1[37] &&
				      !rg_res1[38] &&
				      !rg_res1[39] &&
				      !rg_res1[40] &&
				      !rg_res1[41] &&
				      !rg_res1[42] &&
				      !rg_res1[43] &&
				      !rg_res1[44] &&
				      !rg_res1[45] &&
				      !rg_res1[46] &&
				      !rg_res1[47]) ?
				       32'd71 :
				       ((!rg_res1[36] && !rg_res1[37] &&
					 !rg_res1[38] &&
					 !rg_res1[39] &&
					 !rg_res1[40] &&
					 !rg_res1[41] &&
					 !rg_res1[42] &&
					 !rg_res1[43] &&
					 !rg_res1[44] &&
					 !rg_res1[45] &&
					 !rg_res1[46] &&
					 !rg_res1[47]) ?
					  32'd70 :
					  ((!rg_res1[37] && !rg_res1[38] &&
					    !rg_res1[39] &&
					    !rg_res1[40] &&
					    !rg_res1[41] &&
					    !rg_res1[42] &&
					    !rg_res1[43] &&
					    !rg_res1[44] &&
					    !rg_res1[45] &&
					    !rg_res1[46] &&
					    !rg_res1[47]) ?
					     32'd69 :
					     ((!rg_res1[38] && !rg_res1[39] &&
					       !rg_res1[40] &&
					       !rg_res1[41] &&
					       !rg_res1[42] &&
					       !rg_res1[43] &&
					       !rg_res1[44] &&
					       !rg_res1[45] &&
					       !rg_res1[46] &&
					       !rg_res1[47]) ?
						32'd68 :
						((!rg_res1[39] &&
						  !rg_res1[40] &&
						  !rg_res1[41] &&
						  !rg_res1[42] &&
						  !rg_res1[43] &&
						  !rg_res1[44] &&
						  !rg_res1[45] &&
						  !rg_res1[46] &&
						  !rg_res1[47]) ?
						   32'd67 :
						   ((!rg_res1[40] &&
						     !rg_res1[41] &&
						     !rg_res1[42] &&
						     !rg_res1[43] &&
						     !rg_res1[44] &&
						     !rg_res1[45] &&
						     !rg_res1[46] &&
						     !rg_res1[47]) ?
						      32'd66 :
						      ((!rg_res1[41] &&
							!rg_res1[42] &&
							!rg_res1[43] &&
							!rg_res1[44] &&
							!rg_res1[45] &&
							!rg_res1[46] &&
							!rg_res1[47]) ?
							 32'd65 :
							 ((!rg_res1[42] &&
							   !rg_res1[43] &&
							   !rg_res1[44] &&
							   !rg_res1[45] &&
							   !rg_res1[46] &&
							   !rg_res1[47]) ?
							    32'd64 :
							    ((!rg_res1[43] &&
							      !rg_res1[44] &&
							      !rg_res1[45] &&
							      !rg_res1[46] &&
							      !rg_res1[47]) ?
							       32'd63 :
							       ((!rg_res1[44] &&
								 !rg_res1[45] &&
								 !rg_res1[46] &&
								 !rg_res1[47]) ?
								  32'd62 :
								  ((!rg_res1[45] &&
								    !rg_res1[46] &&
								    !rg_res1[47]) ?
								     32'd61 :
								     ((!rg_res1[46] &&
								       !rg_res1[47]) ?
									32'd60 :
									(rg_res1[47] ?
									   32'd58 :
									   32'd59))))))))))))))))) :
			((!rg_res1[48] && !rg_res1[49] && !rg_res1[50] &&
			  !rg_res1[51] &&
			  !rg_res1[52] &&
			  !rg_res1[53] &&
			  !rg_res1[54] &&
			  !rg_res1[55] &&
			  !rg_res1[56] &&
			  !rg_res1[57] &&
			  !rg_res1[58] &&
			  !rg_res1[59] &&
			  !rg_res1[60] &&
			  !rg_res1[61] &&
			  !rg_res1[62] &&
			  !rg_res1[63]) ?
			   32'd58 :
			   ((!rg_res1[49] && !rg_res1[50] && !rg_res1[51] &&
			     !rg_res1[52] &&
			     !rg_res1[53] &&
			     !rg_res1[54] &&
			     !rg_res1[55] &&
			     !rg_res1[56] &&
			     !rg_res1[57] &&
			     !rg_res1[58] &&
			     !rg_res1[59] &&
			     !rg_res1[60] &&
			     !rg_res1[61] &&
			     !rg_res1[62] &&
			     !rg_res1[63]) ?
			      32'd57 :
			      ((!rg_res1[50] && !rg_res1[51] &&
				!rg_res1[52] &&
				!rg_res1[53] &&
				!rg_res1[54] &&
				!rg_res1[55] &&
				!rg_res1[56] &&
				!rg_res1[57] &&
				!rg_res1[58] &&
				!rg_res1[59] &&
				!rg_res1[60] &&
				!rg_res1[61] &&
				!rg_res1[62] &&
				!rg_res1[63]) ?
				 32'd56 :
				 ((!rg_res1[51] && !rg_res1[52] &&
				   !rg_res1[53] &&
				   !rg_res1[54] &&
				   !rg_res1[55] &&
				   !rg_res1[56] &&
				   !rg_res1[57] &&
				   !rg_res1[58] &&
				   !rg_res1[59] &&
				   !rg_res1[60] &&
				   !rg_res1[61] &&
				   !rg_res1[62] &&
				   !rg_res1[63]) ?
				    32'd55 :
				    ((!rg_res1[52] && !rg_res1[53] &&
				      !rg_res1[54] &&
				      !rg_res1[55] &&
				      !rg_res1[56] &&
				      !rg_res1[57] &&
				      !rg_res1[58] &&
				      !rg_res1[59] &&
				      !rg_res1[60] &&
				      !rg_res1[61] &&
				      !rg_res1[62] &&
				      !rg_res1[63]) ?
				       32'd54 :
				       ((!rg_res1[53] && !rg_res1[54] &&
					 !rg_res1[55] &&
					 !rg_res1[56] &&
					 !rg_res1[57] &&
					 !rg_res1[58] &&
					 !rg_res1[59] &&
					 !rg_res1[60] &&
					 !rg_res1[61] &&
					 !rg_res1[62] &&
					 !rg_res1[63]) ?
					  32'd53 :
					  ((!rg_res1[54] && !rg_res1[55] &&
					    !rg_res1[56] &&
					    !rg_res1[57] &&
					    !rg_res1[58] &&
					    !rg_res1[59] &&
					    !rg_res1[60] &&
					    !rg_res1[61] &&
					    !rg_res1[62] &&
					    !rg_res1[63]) ?
					     32'd52 :
					     ((!rg_res1[55] && !rg_res1[56] &&
					       !rg_res1[57] &&
					       !rg_res1[58] &&
					       !rg_res1[59] &&
					       !rg_res1[60] &&
					       !rg_res1[61] &&
					       !rg_res1[62] &&
					       !rg_res1[63]) ?
						32'd51 :
						((!rg_res1[56] &&
						  !rg_res1[57] &&
						  !rg_res1[58] &&
						  !rg_res1[59] &&
						  !rg_res1[60] &&
						  !rg_res1[61] &&
						  !rg_res1[62] &&
						  !rg_res1[63]) ?
						   32'd50 :
						   ((!rg_res1[57] &&
						     !rg_res1[58] &&
						     !rg_res1[59] &&
						     !rg_res1[60] &&
						     !rg_res1[61] &&
						     !rg_res1[62] &&
						     !rg_res1[63]) ?
						      32'd49 :
						      ((!rg_res1[58] &&
							!rg_res1[59] &&
							!rg_res1[60] &&
							!rg_res1[61] &&
							!rg_res1[62] &&
							!rg_res1[63]) ?
							 32'd48 :
							 ((!rg_res1[59] &&
							   !rg_res1[60] &&
							   !rg_res1[61] &&
							   !rg_res1[62] &&
							   !rg_res1[63]) ?
							    32'd47 :
							    ((!rg_res1[60] &&
							      !rg_res1[61] &&
							      !rg_res1[62] &&
							      !rg_res1[63]) ?
							       32'd46 :
							       ((!rg_res1[61] &&
								 !rg_res1[62] &&
								 !rg_res1[63]) ?
								  32'd45 :
								  ((!rg_res1[62] &&
								    !rg_res1[63]) ?
								     32'd44 :
								     (rg_res1[63] ?
									32'd42 :
									32'd43))))))))))))))))) :
		     ((!rg_res1[64] && !rg_res1[65] && !rg_res1[66] &&
		       !rg_res1[67] &&
		       !rg_res1[68] &&
		       !rg_res1[69] &&
		       !rg_res1[70] &&
		       !rg_res1[71] &&
		       !rg_res1[72] &&
		       !rg_res1[73] &&
		       !rg_res1[74] &&
		       !rg_res1[75] &&
		       !rg_res1[76] &&
		       !rg_res1[77] &&
		       !rg_res1[78] &&
		       !rg_res1[79]) ?
			32'd42 :
			((!rg_res1[65] && !rg_res1[66] && !rg_res1[67] &&
			  !rg_res1[68] &&
			  !rg_res1[69] &&
			  !rg_res1[70] &&
			  !rg_res1[71] &&
			  !rg_res1[72] &&
			  !rg_res1[73] &&
			  !rg_res1[74] &&
			  !rg_res1[75] &&
			  !rg_res1[76] &&
			  !rg_res1[77] &&
			  !rg_res1[78] &&
			  !rg_res1[79]) ?
			   32'd41 :
			   ((!rg_res1[66] && !rg_res1[67] && !rg_res1[68] &&
			     !rg_res1[69] &&
			     !rg_res1[70] &&
			     !rg_res1[71] &&
			     !rg_res1[72] &&
			     !rg_res1[73] &&
			     !rg_res1[74] &&
			     !rg_res1[75] &&
			     !rg_res1[76] &&
			     !rg_res1[77] &&
			     !rg_res1[78] &&
			     !rg_res1[79]) ?
			      32'd40 :
			      ((!rg_res1[67] && !rg_res1[68] &&
				!rg_res1[69] &&
				!rg_res1[70] &&
				!rg_res1[71] &&
				!rg_res1[72] &&
				!rg_res1[73] &&
				!rg_res1[74] &&
				!rg_res1[75] &&
				!rg_res1[76] &&
				!rg_res1[77] &&
				!rg_res1[78] &&
				!rg_res1[79]) ?
				 32'd39 :
				 ((!rg_res1[68] && !rg_res1[69] &&
				   !rg_res1[70] &&
				   !rg_res1[71] &&
				   !rg_res1[72] &&
				   !rg_res1[73] &&
				   !rg_res1[74] &&
				   !rg_res1[75] &&
				   !rg_res1[76] &&
				   !rg_res1[77] &&
				   !rg_res1[78] &&
				   !rg_res1[79]) ?
				    32'd38 :
				    ((!rg_res1[69] && !rg_res1[70] &&
				      !rg_res1[71] &&
				      !rg_res1[72] &&
				      !rg_res1[73] &&
				      !rg_res1[74] &&
				      !rg_res1[75] &&
				      !rg_res1[76] &&
				      !rg_res1[77] &&
				      !rg_res1[78] &&
				      !rg_res1[79]) ?
				       32'd37 :
				       ((!rg_res1[70] && !rg_res1[71] &&
					 !rg_res1[72] &&
					 !rg_res1[73] &&
					 !rg_res1[74] &&
					 !rg_res1[75] &&
					 !rg_res1[76] &&
					 !rg_res1[77] &&
					 !rg_res1[78] &&
					 !rg_res1[79]) ?
					  32'd36 :
					  ((!rg_res1[71] && !rg_res1[72] &&
					    !rg_res1[73] &&
					    !rg_res1[74] &&
					    !rg_res1[75] &&
					    !rg_res1[76] &&
					    !rg_res1[77] &&
					    !rg_res1[78] &&
					    !rg_res1[79]) ?
					     32'd35 :
					     ((!rg_res1[72] && !rg_res1[73] &&
					       !rg_res1[74] &&
					       !rg_res1[75] &&
					       !rg_res1[76] &&
					       !rg_res1[77] &&
					       !rg_res1[78] &&
					       !rg_res1[79]) ?
						32'd34 :
						((!rg_res1[73] &&
						  !rg_res1[74] &&
						  !rg_res1[75] &&
						  !rg_res1[76] &&
						  !rg_res1[77] &&
						  !rg_res1[78] &&
						  !rg_res1[79]) ?
						   32'd33 :
						   ((!rg_res1[74] &&
						     !rg_res1[75] &&
						     !rg_res1[76] &&
						     !rg_res1[77] &&
						     !rg_res1[78] &&
						     !rg_res1[79]) ?
						      32'd32 :
						      ((!rg_res1[75] &&
							!rg_res1[76] &&
							!rg_res1[77] &&
							!rg_res1[78] &&
							!rg_res1[79]) ?
							 32'd31 :
							 ((!rg_res1[76] &&
							   !rg_res1[77] &&
							   !rg_res1[78] &&
							   !rg_res1[79]) ?
							    32'd30 :
							    ((!rg_res1[77] &&
							      !rg_res1[78] &&
							      !rg_res1[79]) ?
							       32'd29 :
							       ((!rg_res1[78] &&
								 !rg_res1[79]) ?
								  32'd28 :
								  (rg_res1[79] ?
								     32'd26 :
								     32'd27))))))))))))))))) :
		  ((!rg_res1[80] && !rg_res1[81] && !rg_res1[82] &&
		    !rg_res1[83] &&
		    !rg_res1[84] &&
		    !rg_res1[85] &&
		    !rg_res1[86] &&
		    !rg_res1[87] &&
		    !rg_res1[88] &&
		    !rg_res1[89] &&
		    !rg_res1[90] &&
		    !rg_res1[91] &&
		    !rg_res1[92] &&
		    !rg_res1[93] &&
		    !rg_res1[94] &&
		    !rg_res1[95]) ?
		     32'd26 :
		     ((!rg_res1[81] && !rg_res1[82] && !rg_res1[83] &&
		       !rg_res1[84] &&
		       !rg_res1[85] &&
		       !rg_res1[86] &&
		       !rg_res1[87] &&
		       !rg_res1[88] &&
		       !rg_res1[89] &&
		       !rg_res1[90] &&
		       !rg_res1[91] &&
		       !rg_res1[92] &&
		       !rg_res1[93] &&
		       !rg_res1[94] &&
		       !rg_res1[95]) ?
			32'd25 :
			((!rg_res1[82] && !rg_res1[83] && !rg_res1[84] &&
			  !rg_res1[85] &&
			  !rg_res1[86] &&
			  !rg_res1[87] &&
			  !rg_res1[88] &&
			  !rg_res1[89] &&
			  !rg_res1[90] &&
			  !rg_res1[91] &&
			  !rg_res1[92] &&
			  !rg_res1[93] &&
			  !rg_res1[94] &&
			  !rg_res1[95]) ?
			   32'd24 :
			   ((!rg_res1[83] && !rg_res1[84] && !rg_res1[85] &&
			     !rg_res1[86] &&
			     !rg_res1[87] &&
			     !rg_res1[88] &&
			     !rg_res1[89] &&
			     !rg_res1[90] &&
			     !rg_res1[91] &&
			     !rg_res1[92] &&
			     !rg_res1[93] &&
			     !rg_res1[94] &&
			     !rg_res1[95]) ?
			      32'd23 :
			      ((!rg_res1[84] && !rg_res1[85] &&
				!rg_res1[86] &&
				!rg_res1[87] &&
				!rg_res1[88] &&
				!rg_res1[89] &&
				!rg_res1[90] &&
				!rg_res1[91] &&
				!rg_res1[92] &&
				!rg_res1[93] &&
				!rg_res1[94] &&
				!rg_res1[95]) ?
				 32'd22 :
				 ((!rg_res1[85] && !rg_res1[86] &&
				   !rg_res1[87] &&
				   !rg_res1[88] &&
				   !rg_res1[89] &&
				   !rg_res1[90] &&
				   !rg_res1[91] &&
				   !rg_res1[92] &&
				   !rg_res1[93] &&
				   !rg_res1[94] &&
				   !rg_res1[95]) ?
				    32'd21 :
				    ((!rg_res1[86] && !rg_res1[87] &&
				      !rg_res1[88] &&
				      !rg_res1[89] &&
				      !rg_res1[90] &&
				      !rg_res1[91] &&
				      !rg_res1[92] &&
				      !rg_res1[93] &&
				      !rg_res1[94] &&
				      !rg_res1[95]) ?
				       32'd20 :
				       ((!rg_res1[87] && !rg_res1[88] &&
					 !rg_res1[89] &&
					 !rg_res1[90] &&
					 !rg_res1[91] &&
					 !rg_res1[92] &&
					 !rg_res1[93] &&
					 !rg_res1[94] &&
					 !rg_res1[95]) ?
					  32'd19 :
					  ((!rg_res1[88] && !rg_res1[89] &&
					    !rg_res1[90] &&
					    !rg_res1[91] &&
					    !rg_res1[92] &&
					    !rg_res1[93] &&
					    !rg_res1[94] &&
					    !rg_res1[95]) ?
					     32'd18 :
					     ((!rg_res1[89] && !rg_res1[90] &&
					       !rg_res1[91] &&
					       !rg_res1[92] &&
					       !rg_res1[93] &&
					       !rg_res1[94] &&
					       !rg_res1[95]) ?
						32'd17 :
						((!rg_res1[90] &&
						  !rg_res1[91] &&
						  !rg_res1[92] &&
						  !rg_res1[93] &&
						  !rg_res1[94] &&
						  !rg_res1[95]) ?
						   32'd16 :
						   ((!rg_res1[91] &&
						     !rg_res1[92] &&
						     !rg_res1[93] &&
						     !rg_res1[94] &&
						     !rg_res1[95]) ?
						      32'd15 :
						      ((!rg_res1[92] &&
							!rg_res1[93] &&
							!rg_res1[94] &&
							!rg_res1[95]) ?
							 32'd14 :
							 ((!rg_res1[93] &&
							   !rg_res1[94] &&
							   !rg_res1[95]) ?
							    32'd13 :
							    ((!rg_res1[94] &&
							      !rg_res1[95]) ?
							       32'd12 :
							       (rg_res1[95] ?
								  32'd10 :
								  32'd11))))))))))))))))) :
	       ((!rg_res1[96] && !rg_res1[97] && !rg_res1[98] &&
		 !rg_res1[99] &&
		 !rg_res1[100] &&
		 !rg_res1[101] &&
		 !rg_res1[102] &&
		 !rg_res1[103] &&
		 !rg_res1[104] &&
		 !rg_res1[105]) ?
		  32'd10 :
		  ((!rg_res1[97] && !rg_res1[98] && !rg_res1[99] &&
		    !rg_res1[100] &&
		    !rg_res1[101] &&
		    !rg_res1[102] &&
		    !rg_res1[103] &&
		    !rg_res1[104] &&
		    !rg_res1[105]) ?
		     32'd9 :
		     ((!rg_res1[98] && !rg_res1[99] && !rg_res1[100] &&
		       !rg_res1[101] &&
		       !rg_res1[102] &&
		       !rg_res1[103] &&
		       !rg_res1[104] &&
		       !rg_res1[105]) ?
			32'd8 :
			((!rg_res1[99] && !rg_res1[100] && !rg_res1[101] &&
			  !rg_res1[102] &&
			  !rg_res1[103] &&
			  !rg_res1[104] &&
			  !rg_res1[105]) ?
			   32'd7 :
			   ((!rg_res1[100] && !rg_res1[101] &&
			     !rg_res1[102] &&
			     !rg_res1[103] &&
			     !rg_res1[104] &&
			     !rg_res1[105]) ?
			      32'd6 :
			      ((!rg_res1[101] && !rg_res1[102] &&
				!rg_res1[103] &&
				!rg_res1[104] &&
				!rg_res1[105]) ?
				 32'd5 :
				 ((!rg_res1[102] && !rg_res1[103] &&
				   !rg_res1[104] &&
				   !rg_res1[105]) ?
				    32'd4 :
				    ((!rg_res1[103] && !rg_res1[104] &&
				      !rg_res1[105]) ?
				       32'd3 :
				       ((!rg_res1[104] && !rg_res1[105]) ?
					  32'd2 :
					  (rg_res1[105] ?
					     32'd0 :
					     32'd1)))))))))) ;
  assign i1_EN = 1'd1 ;

  // register rg_dp_ex0
  assign rg_dp_ex0_D_IN = rg_dp_ex02 ;
  assign rg_dp_ex0_EN = 1'd1 ;

  // register rg_dp_ex00
  assign rg_dp_ex00_D_IN = rg_dp_ex0 ;
  assign rg_dp_ex00_EN = 1'd1 ;

  // register rg_dp_ex01
  assign rg_dp_ex01_D_IN = rg_dp_ex00 ;
  assign rg_dp_ex01_EN = 1'd1 ;

  // register rg_dp_ex02
  assign rg_dp_ex02_D_IN =
	     qnan__h5484 ? 3'b111 : { nan__h5487, inf__h5485, zero__h5486 } ;
  assign rg_dp_ex02_EN = 1'd1 ;

  // register rg_dp_ex1
  assign rg_dp_ex1_D_IN = rg_dp_ex11 ;
  assign rg_dp_ex1_EN = 1'd1 ;

  // register rg_dp_ex11
  assign rg_dp_ex11_D_IN = rg_dp_ex01 ;
  assign rg_dp_ex11_EN = 1'd1 ;

  // register rg_dp_ex2
  assign rg_dp_ex2_D_IN = 3'h0 ;
  assign rg_dp_ex2_EN = 1'b0 ;

  // register rg_dp_ex2_d
  assign rg_dp_ex2_d_D_IN = rg_dp_ex1 ;
  assign rg_dp_ex2_d_EN = 1'd1 ;

  // register rg_dp_ex3
  assign rg_dp_ex3_D_IN = 3'h0 ;
  assign rg_dp_ex3_EN = 1'b0 ;

  // register rg_dp_ex4
  assign rg_dp_ex4_D_IN = 3'h0 ;
  assign rg_dp_ex4_EN = 1'b0 ;

  // register rg_dp_ex_1
  assign rg_dp_ex_1_D_IN = 3'h0 ;
  assign rg_dp_ex_1_EN = 1'b0 ;

  // register rg_dp_valid_0
  assign rg_dp_valid_0_D_IN = EN_send ;
  assign rg_dp_valid_0_EN = 1'd1 ;

  // register rg_dp_valid_1
  assign rg_dp_valid_1_D_IN = rg_dp_valid_0 ;
  assign rg_dp_valid_1_EN = 1'd1 ;

  // register rg_dp_valid_2
  assign rg_dp_valid_2_D_IN = rg_dp_valid_1 ;
  assign rg_dp_valid_2_EN = 1'd1 ;

  // register rg_dp_valid_3
  assign rg_dp_valid_3_D_IN = rg_dp_valid_2 ;
  assign rg_dp_valid_3_EN = 1'd1 ;

  // register rg_dp_valid_4
  assign rg_dp_valid_4_D_IN = rg_dp_valid_3 ;
  assign rg_dp_valid_4_EN = 1'd1 ;

  // register rg_dp_valid_5
  assign rg_dp_valid_5_D_IN = rg_dp_valid_4 ;
  assign rg_dp_valid_5_EN = 1'd1 ;

  // register rg_dp_valid_6
  assign rg_dp_valid_6_D_IN = rg_dp_valid_5 ;
  assign rg_dp_valid_6_EN = 1'd1 ;

  // register rg_dp_valid_7
  assign rg_dp_valid_7_D_IN = rg_dp_valid_6 ;
  assign rg_dp_valid_7_EN = 1'd1 ;

  // register rg_e0
  assign rg_e0_D_IN = rg_e02 ;
  assign rg_e0_EN = 1'd1 ;

  // register rg_e00
  assign rg_e00_D_IN = rg_e0 ;
  assign rg_e00_EN = 1'd1 ;

  // register rg_e01
  assign rg_e01_D_IN = rg_e00 ;
  assign rg_e01_EN = 1'd1 ;

  // register rg_e011
  assign rg_e011_D_IN = rg_e01 ;
  assign rg_e011_EN = 1'd1 ;

  // register rg_e02
  assign rg_e02_D_IN =
	     { x__h4751,
	       (e__h4759[12] &&
		({ 20'd0, x__h4945 } ^ 32'h80000000) <= 32'h80000069) ?
		 { 20'd0, x__h4945 } :
		 32'd0,
	       x__h4974,
	       x__h5390 } ;
  assign rg_e02_EN = 1'd1 ;

  // register rg_e1
  assign rg_e1_D_IN = 46'h0 ;
  assign rg_e1_EN = 1'b0 ;

  // register rg_exc0
  assign rg_exc0_D_IN = 5'h0 ;
  assign rg_exc0_EN = 1'b0 ;

  // register rg_exc1
  assign rg_exc1_D_IN = 5'h0 ;
  assign rg_exc1_EN = 1'b0 ;

  // register rg_exc2
  assign rg_exc2_D_IN = rg_e011[6:2] ;
  assign rg_exc2_EN = 1'd1 ;

  // register rg_operands1
  assign rg_operands1_D_IN = send_data_in ;
  assign rg_operands1_EN = EN_send ;

  // register rg_operands10
  assign rg_operands10_D_IN = send_data_in ;
  assign rg_operands10_EN = EN_send ;

  // register rg_operands11
  assign rg_operands11_D_IN = send_data_in ;
  assign rg_operands11_EN = EN_send ;

  // register rg_operands2
  assign rg_operands2_D_IN = send_data_in ;
  assign rg_operands2_EN = EN_send ;

  // register rg_operands3
  assign rg_operands3_D_IN = send_data_in ;
  assign rg_operands3_EN = EN_send ;

  // register rg_operands3_1
  assign rg_operands3_1_D_IN = rg_operands3 ;
  assign rg_operands3_1_EN = 1'd1 ;

  // register rg_operands4
  assign rg_operands4_D_IN = send_data_in ;
  assign rg_operands4_EN = EN_send ;

  // register rg_operands5
  assign rg_operands5_D_IN = send_data_in ;
  assign rg_operands5_EN = EN_send ;

  // register rg_operands6
  assign rg_operands6_D_IN = send_data_in ;
  assign rg_operands6_EN = EN_send ;

  // register rg_operands7
  assign rg_operands7_D_IN = send_data_in ;
  assign rg_operands7_EN = EN_send ;

  // register rg_operands8
  assign rg_operands8_D_IN = send_data_in ;
  assign rg_operands8_EN = EN_send ;

  // register rg_operands9
  assign rg_operands9_D_IN = send_data_in ;
  assign rg_operands9_EN = EN_send ;

  // register rg_out
  assign rg_out_D_IN = 69'h0 ;
  assign rg_out_EN = 1'b0 ;

  // register rg_out_1
  assign rg_out_1_D_IN = 69'h0 ;
  assign rg_out_1_EN = 1'b0 ;

  // register rg_out_2
  assign rg_out_2_D_IN = 69'h0 ;
  assign rg_out_2_EN = 1'b0 ;

  // register rg_out_3
  assign rg_out_3_D_IN = 69'h0 ;
  assign rg_out_3_EN = 1'b0 ;

  // register rg_out_d
  assign rg_out_d_D_IN =
	     { rg_s1,
	       rg_x0[6] ?
		 63'h7FF8000000000000 :
		 IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS__ETC___d1063,
	       !rg_x0[6] &&
	       IF_rg_x0_99_BIT_4_066_OR_rg_x0_99_BIT_3_067_06_ETC___d1075,
	       1'd0,
	       !rg_x0[6] &&
	       (rg_x0[4] ||
		IF_rg_x0_99_BIT_3_067_THEN_rg_exc2_069_BIT_2_0_ETC___d1096),
	       !rg_x0[6] &&
	       (rg_x0[4] ?
		  rg_exc2[1] :
		  IF_rg_x0_99_BIT_3_067_THEN_IF_rg_x0_99_BIT_123_ETC___d1123),
	       !rg_x0[6] &&
	       (rg_x0[4] || rg_x0[3] || rg_x0[2] ||
		guard__h1198855 != 3'b0) } ;
  assign rg_out_d_EN = 1'd1 ;

  // register rg_partial_product0
  assign rg_partial_product0_D_IN =
	     rg_partial_product0_1[107:0] + rg_partial_product0_1[215:108] ;
  assign rg_partial_product0_EN = 1'd1 ;

  // register rg_partial_product0_01
  assign rg_partial_product0_01_D_IN = 108'h0 ;
  assign rg_partial_product0_01_EN = 1'b0 ;

  // register rg_partial_product0_1
  assign rg_partial_product0_1_D_IN = { 48'b0, y__h6021, 48'b0, y1__h6022 } ;
  assign rg_partial_product0_1_EN = 1'd1 ;

  // register rg_partial_product1
  assign rg_partial_product1_D_IN =
	     { rg_partial_product1_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q7[101:0],
	       6'd0 } ;
  assign rg_partial_product1_EN = 1'd1 ;

  // register rg_partial_product1_1
  assign rg_partial_product1_1_D_IN = { 48'b0, y__h6312, 48'b0, y1__h6313 } ;
  assign rg_partial_product1_1_EN = 1'd1 ;

  // register rg_partial_product1_11
  assign rg_partial_product1_11_D_IN = 108'h0 ;
  assign rg_partial_product1_11_EN = 1'b0 ;

  // register rg_partial_product2
  assign rg_partial_product2_D_IN =
	     { rg_partial_product2_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q8[95:0],
	       12'd0 } ;
  assign rg_partial_product2_EN = 1'd1 ;

  // register rg_partial_product2_1
  assign rg_partial_product2_1_D_IN = { 48'b0, y__h6568, 48'b0, y1__h6569 } ;
  assign rg_partial_product2_1_EN = 1'd1 ;

  // register rg_partial_product2_21
  assign rg_partial_product2_21_D_IN = 108'h0 ;
  assign rg_partial_product2_21_EN = 1'b0 ;

  // register rg_partial_product3
  assign rg_partial_product3_D_IN =
	     { rg_partial_product3_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q9[89:0],
	       18'd0 } ;
  assign rg_partial_product3_EN = 1'd1 ;

  // register rg_partial_product3_1
  assign rg_partial_product3_1_D_IN = { 48'b0, y__h6824, 48'b0, y1__h6825 } ;
  assign rg_partial_product3_1_EN = 1'd1 ;

  // register rg_partial_product3_31
  assign rg_partial_product3_31_D_IN = 108'h0 ;
  assign rg_partial_product3_31_EN = 1'b0 ;

  // register rg_partial_product4
  assign rg_partial_product4_D_IN =
	     { rg_partial_product4_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q10[83:0],
	       24'd0 } ;
  assign rg_partial_product4_EN = 1'd1 ;

  // register rg_partial_product4_1
  assign rg_partial_product4_1_D_IN = { 48'b0, y__h7080, 48'b0, y1__h7081 } ;
  assign rg_partial_product4_1_EN = 1'd1 ;

  // register rg_partial_product4_41
  assign rg_partial_product4_41_D_IN = 108'h0 ;
  assign rg_partial_product4_41_EN = 1'b0 ;

  // register rg_partial_product5
  assign rg_partial_product5_D_IN =
	     { rg_partial_product5_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q11[77:0],
	       30'd0 } ;
  assign rg_partial_product5_EN = 1'd1 ;

  // register rg_partial_product5_1
  assign rg_partial_product5_1_D_IN = { 48'b0, y__h7336, 48'b0, y1__h7337 } ;
  assign rg_partial_product5_1_EN = 1'd1 ;

  // register rg_partial_product5_2
  assign rg_partial_product5_2_D_IN = rg_partial_product5 ;
  assign rg_partial_product5_2_EN = 1'd1 ;

  // register rg_partial_product5_51
  assign rg_partial_product5_51_D_IN = 108'h0 ;
  assign rg_partial_product5_51_EN = 1'b0 ;

  // register rg_partial_product6
  assign rg_partial_product6_D_IN =
	     { rg_partial_product6_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q12[71:0],
	       36'd0 } ;
  assign rg_partial_product6_EN = 1'd1 ;

  // register rg_partial_product6_1
  assign rg_partial_product6_1_D_IN = { 48'b0, y__h7592, 48'b0, y1__h7593 } ;
  assign rg_partial_product6_1_EN = 1'd1 ;

  // register rg_partial_product6_2
  assign rg_partial_product6_2_D_IN = rg_partial_product6 ;
  assign rg_partial_product6_2_EN = 1'd1 ;

  // register rg_partial_product6_61
  assign rg_partial_product6_61_D_IN = 108'h0 ;
  assign rg_partial_product6_61_EN = 1'b0 ;

  // register rg_partial_product7
  assign rg_partial_product7_D_IN =
	     { rg_partial_product7_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q13[65:0],
	       42'd0 } ;
  assign rg_partial_product7_EN = 1'd1 ;

  // register rg_partial_product7_1
  assign rg_partial_product7_1_D_IN = { 48'b0, y__h7848, 48'b0, y1__h7849 } ;
  assign rg_partial_product7_1_EN = 1'd1 ;

  // register rg_partial_product7_2
  assign rg_partial_product7_2_D_IN = rg_partial_product7 ;
  assign rg_partial_product7_2_EN = 1'd1 ;

  // register rg_partial_product7_71
  assign rg_partial_product7_71_D_IN = 108'h0 ;
  assign rg_partial_product7_71_EN = 1'b0 ;

  // register rg_partial_product8
  assign rg_partial_product8_D_IN =
	     { rg_partial_product8_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q14[59:0],
	       48'd0 } ;
  assign rg_partial_product8_EN = 1'd1 ;

  // register rg_partial_product8_1
  assign rg_partial_product8_1_D_IN = { 48'b0, y__h8104, 48'b0, y1__h8105 } ;
  assign rg_partial_product8_1_EN = 1'd1 ;

  // register rg_partial_product8_2
  assign rg_partial_product8_2_D_IN = rg_partial_product8 ;
  assign rg_partial_product8_2_EN = 1'd1 ;

  // register rg_partial_product8_81
  assign rg_partial_product8_81_D_IN = 108'h0 ;
  assign rg_partial_product8_81_EN = 1'b0 ;

  // register rg_res
  assign rg_res_D_IN = x__h9362 + rg_partial_product4 ;
  assign rg_res_EN = 1'd1 ;

  // register rg_res1
  assign rg_res1_D_IN = x__h9649 + rg_res ;
  assign rg_res1_EN = 1'd1 ;

  // register rg_res11
  assign rg_res11_D_IN = rg_res1 ;
  assign rg_res11_EN = 1'd1 ;

  // register rg_s0
  assign rg_s0_D_IN = rg_s02 ;
  assign rg_s0_EN = 1'd1 ;

  // register rg_s00
  assign rg_s00_D_IN = rg_s0 ;
  assign rg_s00_EN = 1'd1 ;

  // register rg_s01
  assign rg_s01_D_IN = rg_s00 ;
  assign rg_s01_EN = 1'd1 ;

  // register rg_s02
  assign rg_s02_D_IN = rg_operands1[127] != rg_operands1[63] ;
  assign rg_s02_EN = 1'd1 ;

  // register rg_s1
  assign rg_s1_D_IN = !rg_e011[6] && rg_s11 ;
  assign rg_s1_EN = 1'd1 ;

  // register rg_s11
  assign rg_s11_D_IN = !rg_e01[6] && rg_s01 ;
  assign rg_s11_EN = 1'd1 ;

  // register rg_x0
  assign rg_x0_D_IN =
	     { IF_rg_e011_BITS_49_TO_39_EQ_0_THEN_result19726_ETC__q15[105:0],
	       exp_out__h1197212,
	       x__h1197895,
	       x__h1198633 } ;
  assign rg_x0_EN = 1'd1 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_rg_operands1_3_BITS_126_TO_116__ETC__q4 =
	     _0_CONCAT_IF_rg_operands1_3_BITS_126_TO_116_4_E_ETC___d46 ?
	       e__h4759 :
	       13'd2046 ;
  assign IF_0b0_CONCAT_NOT_rg_x0_99_BITS_17_TO_7_020_EQ_ETC___d1054 =
	     sfd_res__h1198858[53] ?
	       ((rg_x0[17:7] == 11'd2046) ?
		  63'h7FF0000000000000 :
		  { exp_out__h1199342, sfd_res__h1198858[52:1] }) :
	       { _theResult___fst__h1199354, sfd_res__h1198858[51:0] } ;
  assign IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BIT_7_ETC___d1055 =
	     (IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BIT_71_0_ETC___d1028 ||
	      IF_rg_x0_99_BIT_123_001_THEN_NOT_rg_x0_99_BIT__ETC___d1037) ?
	       IF_0b0_CONCAT_NOT_rg_x0_99_BITS_17_TO_7_020_EQ_ETC___d1054 :
	       { rg_x0[17:7], sfd__h1198856 } ;
  assign IF_NOT_rg_e011_59_BIT_0_66_67_AND_rg_e011_59_B_ETC___d974 =
	     exp_out__h1197212 == 11'd0 && guard_s__h1197221 != 2'd0 ||
	     (x_out__h1197213[51:0] != 52'd0 || rg_e011[3]) &&
	     exp_out__h1197212 == 11'd0 &&
	     result__h1198182 != 2'd0 ;
  assign IF_i1_75_EQ_0_76_THEN_IF_rg_e011_59_BITS_49_TO_ETC___d933 =
	     (i1 == 32'd0) ?
	       exp1__h1197206 :
	       ((rg_e011[49:39] != 11'd0 && !i1_75_MINUS_1_81_SLE_0___d882) ?
		  exp2__h1197207 :
		  rg_e011[49:39]) ;
  assign IF_rg_e011_59_BITS_49_TO_39_64_EQ_0_65_OR_i1_7_ETC___d985 =
	     ((rg_e011[49:39] == 11'd0 || i1_75_MINUS_1_81_SLE_0___d882) &&
	      rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THEN_D_ETC___d910[51]) ?
	       2'd2 :
	       2'd0 ;
  assign IF_rg_e011_59_BIT_3_68_THEN_IF_rg_e011_59_BITS_ETC___d901 =
	     rg_e011[3] ?
	       ((rg_e011[38:7] == 32'd0) ?
		  108'd0 :
		  rg_res11_88_SRL_IF_rg_e011_59_BITS_38_TO_7_71__ETC___d897) :
	       { 1'd0, rg_res11[107:1] } ;
  assign IF_rg_e011_BITS_49_TO_39_EQ_0_THEN_result19726_ETC__q15 =
	     (rg_e011[49:39] == 11'd0) ? result__h1197263 : x_out__h1197213 ;
  assign IF_rg_operands1_3_BITS_126_TO_116_4_EQ_0_5_AND_ETC___d75 =
	     (rg_operands1[126:116] == 11'd0 &&
	      rg_operands1[115:64] == 52'd0 ||
	      rg_operands1[62:52] == 11'd0 && rg_operands1[51:0] == 52'd0) ?
	       2'd1 :
	       2'd0 ;
  assign IF_rg_operands1_3_BITS_126_TO_116_4_EQ_2047_5__ETC___d66 =
	     (rg_operands1[126:116] == 11'd2047 &&
	      rg_operands1[115:64] != 52'd0 ||
	      rg_operands1[62:52] == 11'd2047 &&
	      rg_operands1[51:0] != 52'd0) ?
	       5'd16 :
	       5'd0 ;
  assign IF_rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_ETC___d133 =
	     rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_rg_ETC___d100 ?
	       !snan_valid__h5479 :
	       !rg_operands2_9_BITS_126_TO_116_0_EQ_2047_04_AN_ETC___d131 ;
  assign IF_rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_ETC___d151 =
	     snan__h5480 ||
	     (rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_rg_ETC___d100 ?
		!qnan_valid__h5483 :
		!rg_operands2_9_BITS_126_TO_116_0_EQ_2047_04_AN_ETC___d143) ;
  assign IF_rg_res11_88_SRL_IF_rg_e011_59_BITS_38_TO_7__ETC__q5 =
	     rg_res11_88_SRL_IF_rg_e011_59_BITS_38_TO_7_71__ETC___d897[51] ?
	       2'd2 :
	       2'd0 ;
  assign IF_rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THE_ETC__q6 =
	     rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THEN_D_ETC___d910[51] ?
	       2'd2 :
	       2'd0 ;
  assign IF_rg_x0_99_BIT_123_001_THEN_NOT_rg_x0_99_BIT__ETC___d1037 =
	     x__h1199375 & rg_x0[17:7] == 11'd0 ;
  assign IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS_70__ETC___d1121 =
	     ((guard__h1198855 == 3'b110) ?
		sfd__h1198856 != 52'hFFFFFFFFFFFFF || x__h1199640 != 2'd3 :
		guard__h1198855 != 3'b111 ||
		sfd__h1198856 != 52'hFFFFFFFFFFFFF ||
		x__h1199640 != 2'd3) ||
	     rg_exc2[1] ;
  assign IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BIT_71_0_ETC___d1028 =
	     rg_x0[123] ? rg_x0[71] : rg_x0[70] ;
  assign IF_rg_x0_99_BIT_3_067_THEN_IF_rg_x0_99_BIT_123_ETC___d1123 =
	     rg_x0[3] ?
	       IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS_70__ETC___d1121 :
	       (rg_x0[2] || guard__h1198855 != 3'b0) && rg_exc2[1] ;
  assign IF_rg_x0_99_BIT_3_067_THEN_rg_exc2_069_BIT_2_0_ETC___d1096 =
	     rg_x0[3] ?
	       rg_exc2[2] :
	       (rg_x0[2] || guard__h1198855 != 3'b0) &&
	       (guard__h1198855 != 3'b0 && guard__h1198855 != 3'b001 &&
		guard__h1198855 != 3'b010 &&
		guard__h1198855 != 3'b011 &&
		IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS__ETC___d1092 ||
		rg_exc2[2]) ;
  assign IF_rg_x0_99_BIT_4_066_OR_rg_x0_99_BIT_3_067_06_ETC___d1075 =
	     (rg_x0[4] || rg_x0[3]) ?
	       rg_exc2[4] :
	       (rg_x0[2] || guard__h1198855 != 3'b0) && rg_exc2[4] ;
  assign IF_rg_x0_BIT_123_THEN_rg_x0_BIT_69_CONCAT_NOT__ETC__q3 =
	     rg_x0[123] ?
	       { rg_x0[69], rg_x0[68:18] != 51'd0 } :
	       { rg_x0[68], rg_x0[67:18] != 50'd0 } ;
  assign _0_CONCAT_IF_rg_operands1_3_BITS_126_TO_116_4_E_ETC___d46 =
	     e__h4759[11:0] <= 12'd2046 ;
  assign _theResult_____1_snd_snd__h1199427 =
	     IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BIT_71_0_ETC___d1028 ?
	       e_xo__h1199235 :
	       _theResult_____1_snd_snd__h1199441 ;
  assign _theResult_____1_snd_snd__h1199441 =
	     IF_rg_x0_99_BIT_123_001_THEN_NOT_rg_x0_99_BIT__ETC___d1037 &&
	     e_xo__h1199235 &&
	     rg_x0[68:18] != 51'd0 ;
  assign _theResult___fst__h1199354 =
	     (rg_x0[17:7] == 11'd0 && sfd_res__h1198858[53:52] == 2'b01) ?
	       11'd1 :
	       rg_x0[17:7] ;
  assign a__h6007 =
	     { 7'd0, rg_operands3[126:116] != 11'd0, rg_operands3[115:64] } ;
  assign a_inf__h5473 =
	     rg_operands2[126:116] == 11'd2047 &&
	     rg_operands2[115:64] == 52'd0 ;
  assign a_qnan__h5481 =
	     rg_operands2[126:116] == 11'd2047 && rg_operands2[115] ;
  assign a_snan__h5477 =
	     rg_operands2[126:116] == 11'd2047 && !rg_operands2[115] &&
	     rg_operands2[114:64] != 51'd0 ;
  assign a_z__h5475 =
	     rg_operands2[126:116] == 11'd0 && rg_operands2[115:64] == 52'd0 ;
  assign b_inf__h5474 =
	     rg_operands2[62:52] == 11'd2047 && rg_operands2[51:0] == 52'd0 ;
  assign b_qnan__h5482 = rg_operands2[62:52] == 11'd2047 && rg_operands2[51] ;
  assign b_snan__h5478 =
	     rg_operands2[62:52] == 11'd2047 && !rg_operands2[51] &&
	     rg_operands2[50:0] != 51'd0 ;
  assign b_z__h5476 =
	     rg_operands2[62:52] == 11'd0 && rg_operands2[51:0] == 52'd0 ;
  assign e11__h4756 =
	     (rg_operands1[126:116] == 11'd0) ?
	       11'd1 :
	       rg_operands1[126:116] ;
  assign e22__h4757 =
	     (rg_operands1[62:52] == 11'd0) ? 11'd1 : rg_operands1[62:52] ;
  assign e__h4759 = x__h4806 + 13'd7169 ;
  assign e_xo__h1199235 =
	     rg_x0[17:7] == 11'd2046 && sfd__h1198856 == 52'hFFFFFFFFFFFFF ;
  assign exp1__h1197206 =
	     (rg_e011[49:39] == 11'd2046) ?
	       rg_e011[49:39] :
	       rg_e011[49:39] + 11'd1 ;
  assign exp2__h1197207 =
	     i1_75_MINUS_1_81_SLE_0_CONCAT_rg_e011_59_BITS__ETC___d927 ?
	       x__h1197886 + 11'd1 :
	       11'd0 ;
  assign exp_out__h1197212 =
	     (!rg_e011[0] && rg_e011[49:39] == 11'd0 && rg_e011[3]) ?
	       11'd0 :
	       IF_i1_75_EQ_0_76_THEN_IF_rg_e011_59_BITS_49_TO_ETC___d933 ;
  assign exp_out__h1199342 = rg_x0[17:7] + 11'd1 ;
  assign grd__h1197227 =
	     (rg_e011[38:7] ^ 32'h80000000) > 32'h80000000 &&
	     x__h1197741 != 108'd0 ;
  assign guard__h1198855 =
	     rg_x0[123] ?
	       { rg_x0[70:69], rg_x0[68:18] != 51'd0 } :
	       { rg_x0[69:68], rg_x0[67:18] != 50'd0 } ;
  assign guard_s__h1197221 =
	     { IF_rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THE_ETC__q6[1],
	       rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THEN_D_ETC___d910[50:0] !=
	       51'd0 } ;
  assign i1_75_MINUS_1_81_SLE_0_CONCAT_rg_e011_59_BITS__ETC___d927 =
	     (i1_75_MINUS_1___d881 ^ 32'h80000000) <=
	     ({ 21'd0, x__h1197481 } ^ 32'h80000000) ;
  assign i1_75_MINUS_1_81_SLE_0___d882 =
	     (i1_75_MINUS_1___d881 ^ 32'h80000000) <= 32'h80000000 ;
  assign i1_75_MINUS_1___d881 = i1 - 32'd1 ;
  assign inf__h5485 =
	     IF_rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_ETC___d133 &&
	     IF_rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_ETC___d151 &&
	     a_inf__h5473 | b_inf__h5474 ;
  assign nan__h5487 = snan__h5480 || qnan__h5484 ;
  assign qnan__h5484 =
	     IF_rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_ETC___d133 &&
	     (rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_rg_ETC___d100 ?
		qnan_valid__h5483 :
		rg_operands2_9_BITS_126_TO_116_0_EQ_2047_04_AN_ETC___d143) ;
  assign qnan_valid__h5483 = x__h5906 | y__h5907 ;
  assign res1__h6015 = rg_operands3[0] ? a__h6007 : 60'd0 ;
  assign res1__h6306 = rg_operands3[6] ? a__h6007 : 60'd0 ;
  assign res1__h6562 = rg_operands3[12] ? a__h6007 : 60'd0 ;
  assign res1__h6818 = rg_operands3[18] ? a__h6007 : 60'd0 ;
  assign res1__h7074 = rg_operands3[24] ? a__h6007 : 60'd0 ;
  assign res1__h7330 = rg_operands3[30] ? a__h6007 : 60'd0 ;
  assign res1__h7586 = rg_operands3[36] ? a__h6007 : 60'd0 ;
  assign res1__h7842 = rg_operands3[42] ? a__h6007 : 60'd0 ;
  assign res1__h8098 = rg_operands3[48] ? a__h6007 : 60'd0 ;
  assign res2__h6016 =
	     rg_operands3[1] ?
	       { 6'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 1'd0 } :
	       60'd0 ;
  assign res2__h6307 =
	     rg_operands3[7] ?
	       { 6'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 1'd0 } :
	       60'd0 ;
  assign res2__h6563 =
	     rg_operands3[13] ?
	       { 6'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 1'd0 } :
	       60'd0 ;
  assign res2__h6819 =
	     rg_operands3[19] ?
	       { 6'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 1'd0 } :
	       60'd0 ;
  assign res2__h7075 =
	     rg_operands3[25] ?
	       { 6'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 1'd0 } :
	       60'd0 ;
  assign res2__h7331 =
	     rg_operands3[31] ?
	       { 6'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 1'd0 } :
	       60'd0 ;
  assign res2__h7587 =
	     rg_operands3[37] ?
	       { 6'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 1'd0 } :
	       60'd0 ;
  assign res2__h7843 =
	     rg_operands3[43] ?
	       { 6'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 1'd0 } :
	       60'd0 ;
  assign res2__h8099 =
	     rg_operands3[49] ?
	       { 6'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 1'd0 } :
	       60'd0 ;
  assign res3__h6017 =
	     rg_operands3[2] ?
	       { 5'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 2'd0 } :
	       60'd0 ;
  assign res3__h6308 =
	     rg_operands3[8] ?
	       { 5'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 2'd0 } :
	       60'd0 ;
  assign res3__h6564 =
	     rg_operands3[14] ?
	       { 5'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 2'd0 } :
	       60'd0 ;
  assign res3__h6820 =
	     rg_operands3[20] ?
	       { 5'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 2'd0 } :
	       60'd0 ;
  assign res3__h7076 =
	     rg_operands3[26] ?
	       { 5'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 2'd0 } :
	       60'd0 ;
  assign res3__h7332 =
	     rg_operands3[32] ?
	       { 5'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 2'd0 } :
	       60'd0 ;
  assign res3__h7588 =
	     rg_operands3[38] ?
	       { 5'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 2'd0 } :
	       60'd0 ;
  assign res3__h7844 =
	     rg_operands3[44] ?
	       { 5'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 2'd0 } :
	       60'd0 ;
  assign res3__h8100 =
	     rg_operands3[50] ?
	       { 5'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 2'd0 } :
	       60'd0 ;
  assign res4__h6018 =
	     rg_operands3[3] ?
	       { 4'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 3'd0 } :
	       60'd0 ;
  assign res4__h6309 =
	     rg_operands3[9] ?
	       { 4'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 3'd0 } :
	       60'd0 ;
  assign res4__h6565 =
	     rg_operands3[15] ?
	       { 4'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 3'd0 } :
	       60'd0 ;
  assign res4__h6821 =
	     rg_operands3[21] ?
	       { 4'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 3'd0 } :
	       60'd0 ;
  assign res4__h7077 =
	     rg_operands3[27] ?
	       { 4'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 3'd0 } :
	       60'd0 ;
  assign res4__h7333 =
	     rg_operands3[33] ?
	       { 4'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 3'd0 } :
	       60'd0 ;
  assign res4__h7589 =
	     rg_operands3[39] ?
	       { 4'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 3'd0 } :
	       60'd0 ;
  assign res4__h7845 =
	     rg_operands3[45] ?
	       { 4'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 3'd0 } :
	       60'd0 ;
  assign res4__h8101 =
	     rg_operands3[51] ?
	       { 4'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 3'd0 } :
	       60'd0 ;
  assign res5__h6019 =
	     rg_operands3[4] ?
	       { 3'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 4'd0 } :
	       60'd0 ;
  assign res5__h6310 =
	     rg_operands3[10] ?
	       { 3'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 4'd0 } :
	       60'd0 ;
  assign res5__h6566 =
	     rg_operands3[16] ?
	       { 3'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 4'd0 } :
	       60'd0 ;
  assign res5__h6822 =
	     rg_operands3[22] ?
	       { 3'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 4'd0 } :
	       60'd0 ;
  assign res5__h7078 =
	     rg_operands3[28] ?
	       { 3'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 4'd0 } :
	       60'd0 ;
  assign res5__h7334 =
	     rg_operands3[34] ?
	       { 3'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 4'd0 } :
	       60'd0 ;
  assign res5__h7590 =
	     rg_operands3[40] ?
	       { 3'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 4'd0 } :
	       60'd0 ;
  assign res5__h7846 =
	     rg_operands3[46] ?
	       { 3'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 4'd0 } :
	       60'd0 ;
  assign res5__h8102 =
	     (rg_operands3[62:52] == 11'd0) ?
	       60'd0 :
	       { 3'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 4'd0 } ;
  assign res6__h6020 =
	     rg_operands3[5] ?
	       { 2'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 5'd0 } :
	       60'd0 ;
  assign res6__h6311 =
	     rg_operands3[11] ?
	       { 2'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 5'd0 } :
	       60'd0 ;
  assign res6__h6567 =
	     rg_operands3[17] ?
	       { 2'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 5'd0 } :
	       60'd0 ;
  assign res6__h6823 =
	     rg_operands3[23] ?
	       { 2'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 5'd0 } :
	       60'd0 ;
  assign res6__h7079 =
	     rg_operands3[29] ?
	       { 2'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 5'd0 } :
	       60'd0 ;
  assign res6__h7335 =
	     rg_operands3[35] ?
	       { 2'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 5'd0 } :
	       60'd0 ;
  assign res6__h7591 =
	     rg_operands3[41] ?
	       { 2'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 5'd0 } :
	       60'd0 ;
  assign res6__h7847 =
	     rg_operands3[47] ?
	       { 2'd0,
		 rg_operands3[126:116] != 11'd0,
		 rg_operands3[115:64],
		 5'd0 } :
	       60'd0 ;
  assign result__h1197263 =
	     { x_out__h1197213[107:1],
	       rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THEN_D_ETC___d921 } ;
  assign result__h1198182 =
	     { IF_rg_res11_88_SRL_IF_rg_e011_59_BITS_38_TO_7__ETC__q5[1],
	       x__h1198458 != 51'd0 } ;
  assign rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_rg_ETC___d100 =
	     a_z__h5475 | b_z__h5476 ;
  assign rg_operands2_9_BITS_126_TO_116_0_EQ_2047_04_AN_ETC___d131 =
	     a_snan__h5477 | b_snan__h5478 ;
  assign rg_operands2_9_BITS_126_TO_116_0_EQ_2047_04_AN_ETC___d143 =
	     a_qnan__h5481 | b_qnan__h5482 ;
  assign rg_partial_product1_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q7 =
	     rg_partial_product1_1[107:0] + rg_partial_product1_1[215:108] ;
  assign rg_partial_product2_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q8 =
	     rg_partial_product2_1[107:0] + rg_partial_product2_1[215:108] ;
  assign rg_partial_product3_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q9 =
	     rg_partial_product3_1[107:0] + rg_partial_product3_1[215:108] ;
  assign rg_partial_product4_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q10 =
	     rg_partial_product4_1[107:0] + rg_partial_product4_1[215:108] ;
  assign rg_partial_product5_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q11 =
	     rg_partial_product5_1[107:0] + rg_partial_product5_1[215:108] ;
  assign rg_partial_product6_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q12 =
	     rg_partial_product6_1[107:0] + rg_partial_product6_1[215:108] ;
  assign rg_partial_product7_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q13 =
	     rg_partial_product7_1[107:0] + rg_partial_product7_1[215:108] ;
  assign rg_partial_product8_1_BITS_107_TO_0_PLUS_rg_pa_ETC__q14 =
	     rg_partial_product8_1[107:0] + rg_partial_product8_1[215:108] ;
  assign rg_res11_88_SRL_IF_rg_e011_59_BITS_38_TO_7_71__ETC___d897 =
	     rg_res11 >> x__h1197636 ;
  assign rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THEN_D_ETC___d910 =
	     rg_res11 >> rg_e011[38:7] ;
  assign rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THEN_D_ETC___d921 =
	     rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THEN_D_ETC___d910[0] |
	     grd__h1197227 ;
  assign sfd__h1198856 = rg_x0[123] ? rg_x0[122:71] : rg_x0[121:70] ;
  assign sfd_prec__h1197214 =
	     (rg_e011[3] && rg_e011[38:7] != 32'd0) ?
	       x__h1197741 != 108'd0 :
	       rg_e011[3] && rg_e011[38:7] == 32'd0 ;
  assign sfd_res__h1198858 =
	     { 1'b0, rg_x0[17:7] != 11'd0, sfd__h1198856 } + 54'd1 ;
  assign snan__h5480 =
	     rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_rg_ETC___d100 ?
	       snan_valid__h5479 :
	       rg_operands2_9_BITS_126_TO_116_0_EQ_2047_04_AN_ETC___d131 ;
  assign snan_valid__h5479 = x__h5734 | y__h5735 ;
  assign x01__h1197204 =
	     (rg_e011[49:39] == 11'd0) ?
	       IF_rg_e011_59_BIT_3_68_THEN_IF_rg_e011_59_BITS_ETC___d901 :
	       rg_res11 ;
  assign x02__h1197205 =
	     ((i1 ^ 32'h80000000) <=
	      ({ 21'd0, x__h1197481 } ^ 32'h80000000)) ?
	       rg_res11 << i1_75_MINUS_1___d881 :
	       rg_res11 << x__h1197481 ;
  assign x__h1197481 = rg_e011[49:39] - 11'd1 ;
  assign x__h1197636 = rg_e011[38:7] + 32'd1 ;
  assign x__h1197741 = rg_res11 << x__h1197774 ;
  assign x__h1197774 = 32'd108 - rg_e011[38:7] ;
  assign x__h1197886 = rg_e011[49:39] - i1[10:0] ;
  assign x__h1197895 =
	     { rg_e011[6:5],
	       rg_e011[49:39] == 11'd2046 && i1 == 32'd0 || rg_e011[4],
	       (i1_75_MINUS_1_81_SLE_0_CONCAT_rg_e011_59_BITS__ETC___d927 ||
		x02__h1197205[51:0] != 52'd0) &&
	       IF_NOT_rg_e011_59_BIT_0_66_67_AND_rg_e011_59_B_ETC___d974,
	       rg_e011[49:39] == 11'd0 && exp_out__h1197212 != 11'd0 &&
	       rg_res11[51:0] != 52'd0 } ;
  assign x__h1198458 =
	     { rg_res11_88_SRL_IF_rg_e011_59_BITS_38_TO_7_71__ETC___d897[50:1],
	       rg_res11_88_SRL_IF_rg_e011_59_BITS_38_TO_7_71__ETC___d897[0] |
	       sfd_prec__h1197214 } ;
  assign x__h1198633 =
	     { IF_rg_e011_59_BITS_49_TO_39_64_EQ_0_65_OR_i1_7_ETC___d985[1],
	       (rg_e011[49:39] == 11'd0 || i1_75_MINUS_1_81_SLE_0___d882) &&
	       sfd_prec__h1197214 | x__h1198708 != 51'd0 } ;
  assign x__h1198708 =
	     { rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THEN_D_ETC___d910[50:1],
	       rg_res11_88_SRL_IF_rg_e011_59_BIT_38_08_THEN_D_ETC___d921 } ;
  assign x__h1199375 = x__h1199377 & y__h1199378 ;
  assign x__h1199377 = rg_x0[123] ? !rg_x0[71] : !rg_x0[70] ;
  assign x__h1199640 =
	     { rg_x0[123] ? rg_x0[70] : rg_x0[69],
	       IF_rg_x0_BIT_123_THEN_rg_x0_BIT_69_CONCAT_NOT__ETC__q3[1] } ;
  assign x__h4751 =
	     e__h4759[12] ?
	       11'd0 :
	       IF_0_CONCAT_IF_rg_operands1_3_BITS_126_TO_116__ETC__q4[10:0] ;
  assign x__h4806 = x__h4808 + y__h4809 ;
  assign x__h4808 = { 2'd0, e11__h4756 } ;
  assign x__h4945 = -e__h4759[11:0] ;
  assign x__h4974 =
	     { IF_rg_operands1_3_BITS_126_TO_116_4_EQ_2047_5__ETC___d66[4:3],
	       !e__h4759[12] &&
	       !_0_CONCAT_IF_rg_operands1_3_BITS_126_TO_116_4_E_ETC___d46,
	       !IF_rg_operands1_3_BITS_126_TO_116_4_EQ_0_5_AND_ETC___d75[0] &&
	       e__h4759[12],
	       IF_rg_operands1_3_BITS_126_TO_116_4_EQ_2047_5__ETC___d66[0] } ;
  assign x__h5390 =
	     { x__h4806 == 13'd1023,
	       IF_rg_operands1_3_BITS_126_TO_116_4_EQ_0_5_AND_ETC___d75[0] } ;
  assign x__h5734 = x__h5736 | y__h5737 ;
  assign x__h5736 = x__h5738 | y__h5739 ;
  assign x__h5738 = x__h5740 | y__h5741 ;
  assign x__h5740 = x__h5742 | y__h5743 ;
  assign x__h5742 = a_z__h5475 & b_inf__h5474 ;
  assign x__h5906 = x__h5908 | y__h5909 ;
  assign x__h5908 = x__h5910 | y__h5911 ;
  assign x__h5910 = a_z__h5475 & b_qnan__h5482 ;
  assign x__h6042 = res1__h6015 + res2__h6016 ;
  assign x__h6189 = res4__h6018 + res5__h6019 ;
  assign x__h6333 = res1__h6306 + res2__h6307 ;
  assign x__h6443 = res4__h6309 + res5__h6310 ;
  assign x__h6589 = res1__h6562 + res2__h6563 ;
  assign x__h6699 = res4__h6565 + res5__h6566 ;
  assign x__h6845 = res1__h6818 + res2__h6819 ;
  assign x__h6955 = res4__h6821 + res5__h6822 ;
  assign x__h7101 = res1__h7074 + res2__h7075 ;
  assign x__h7211 = res4__h7077 + res5__h7078 ;
  assign x__h7357 = res1__h7330 + res2__h7331 ;
  assign x__h7467 = res4__h7333 + res5__h7334 ;
  assign x__h7613 = res1__h7586 + res2__h7587 ;
  assign x__h7723 = res4__h7589 + res5__h7590 ;
  assign x__h7869 = res1__h7842 + res2__h7843 ;
  assign x__h7979 = res4__h7845 + res5__h7846 ;
  assign x__h8125 = res1__h8098 + res2__h8099 ;
  assign x__h9362 = x__h9363 + rg_partial_product3 ;
  assign x__h9363 = x__h9364 + rg_partial_product2 ;
  assign x__h9364 = rg_partial_product0 + rg_partial_product1 ;
  assign x__h9649 = x__h9650 + rg_partial_product8_2 ;
  assign x__h9650 = x__h9651 + rg_partial_product7_2 ;
  assign x__h9651 = rg_partial_product5_2 + rg_partial_product6_2 ;
  assign x_out0__h1197208 =
	     (rg_e011[49:39] != 11'd0 && !i1_75_MINUS_1_81_SLE_0___d882) ?
	       x02__h1197205 :
	       x01__h1197204 ;
  assign x_out1__h1197211 =
	     (rg_e011[49:39] == 11'd2046 && i1 == 32'd0 || rg_e011[4]) ?
	       108'h1FFFFFFFFFFFFFFFFFFFFFFFFFF :
	       x_out0__h1197208 ;
  assign x_out__h1197213 =
	     (!rg_e011[0] && rg_e011[49:39] == 11'd0 && rg_e011[3] &&
	      rg_e011[38:7] == 32'd0) ?
	       108'd0 :
	       (rg_e011[6] ?
		  108'h180000000000000000000000000 :
		  x_out1__h1197211) ;
  assign y1__h6022 = x__h6189 + res6__h6020 ;
  assign y1__h6313 = x__h6443 + res6__h6311 ;
  assign y1__h6569 = x__h6699 + res6__h6567 ;
  assign y1__h6825 = x__h6955 + res6__h6823 ;
  assign y1__h7081 = x__h7211 + res6__h7079 ;
  assign y1__h7337 = x__h7467 + res6__h7335 ;
  assign y1__h7593 = x__h7723 + res6__h7591 ;
  assign y1__h7849 = x__h7979 + res6__h7847 ;
  assign y1__h8105 = res4__h8101 + res5__h8102 ;
  assign y__h1199378 = rg_x0[1:0] != 2'd0 ;
  assign y__h4809 = { 2'd0, e22__h4757 } ;
  assign y__h5735 = a_inf__h5473 & b_snan__h5478 ;
  assign y__h5737 = b_inf__h5474 & a_snan__h5477 ;
  assign y__h5739 = a_snan__h5477 & b_z__h5476 ;
  assign y__h5741 = a_z__h5475 & b_snan__h5478 ;
  assign y__h5743 = a_inf__h5473 & b_z__h5476 ;
  assign y__h5907 = b_inf__h5474 & a_qnan__h5481 ;
  assign y__h5909 = a_inf__h5473 & b_qnan__h5482 ;
  assign y__h5911 = a_qnan__h5481 & b_z__h5476 ;
  assign y__h6021 = x__h6042 + res3__h6017 ;
  assign y__h6312 = x__h6333 + res3__h6308 ;
  assign y__h6568 = x__h6589 + res3__h6564 ;
  assign y__h6824 = x__h6845 + res3__h6820 ;
  assign y__h7080 = x__h7101 + res3__h7076 ;
  assign y__h7336 = x__h7357 + res3__h7332 ;
  assign y__h7592 = x__h7613 + res3__h7588 ;
  assign y__h7848 = x__h7869 + res3__h7844 ;
  assign y__h8104 = x__h8125 + res3__h8100 ;
  assign zero__h5486 =
	     IF_rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_ETC___d133 &&
	     IF_rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_ETC___d151 &&
	     rg_operands2_9_BITS_126_TO_116_0_EQ_0_1_AND_rg_ETC___d100 ;
  always@(rg_dp_ex2_d)
  begin
    case (rg_dp_ex2_d)
      3'b001: CASE_rg_dp_ex2_d_0b1_0_0b10_2047_0b100_2047_2047__q1 = 11'd0;
      3'b010, 3'b100:
	  CASE_rg_dp_ex2_d_0b1_0_0b10_2047_0b100_2047_2047__q1 = 11'd2047;
      default: CASE_rg_dp_ex2_d_0b1_0_0b10_2047_0b100_2047_2047__q1 =
		   11'd2047;
    endcase
  end
  always@(rg_dp_ex2_d)
  begin
    case (rg_dp_ex2_d)
      3'b001, 3'b010:
	  CASE_rg_dp_ex2_d_0b1_0_0b10_0_0b100_2251799813_ETC__q2 = 52'd0;
      3'b100:
	  CASE_rg_dp_ex2_d_0b1_0_0b10_0_0b100_2251799813_ETC__q2 =
	      52'h8000000000000;
      default: CASE_rg_dp_ex2_d_0b1_0_0b10_0_0b100_2251799813_ETC__q2 =
		   52'h8000000000000;
    endcase
  end
  always@(guard__h1198855 or
	  e_xo__h1199235 or rg_x0 or _theResult_____1_snd_snd__h1199427)
  begin
    case (guard__h1198855)
      3'b100:
	  IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS__ETC___d1092 =
	      _theResult_____1_snd_snd__h1199427;
      3'b101, 3'b110:
	  IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS__ETC___d1092 =
	      e_xo__h1199235 && rg_x0[68:18] != 51'd0;
      default: IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS__ETC___d1092 =
		   guard__h1198855 == 3'b111 && e_xo__h1199235 &&
		   rg_x0[68:18] != 51'd0;
    endcase
  end
  always@(guard__h1198855 or
	  rg_x0 or
	  sfd__h1198856 or
	  IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BIT_7_ETC___d1055 or
	  IF_0b0_CONCAT_NOT_rg_x0_99_BITS_17_TO_7_020_EQ_ETC___d1054)
  begin
    case (guard__h1198855)
      3'b0, 3'b001, 3'b010, 3'b011:
	  IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS__ETC___d1063 =
	      { rg_x0[17:7], sfd__h1198856 };
      3'b100:
	  IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS__ETC___d1063 =
	      IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BIT_7_ETC___d1055;
      3'b101, 3'b110, 3'b111:
	  IF_IF_rg_x0_99_BIT_123_001_THEN_rg_x0_99_BITS__ETC___d1063 =
	      IF_0b0_CONCAT_NOT_rg_x0_99_BITS_17_TO_7_020_EQ_ETC___d1054;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        i1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_dp_ex0 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dp_ex00 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dp_ex01 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dp_ex02 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dp_ex1 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dp_ex11 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dp_ex2 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dp_ex2_d <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dp_ex3 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dp_ex4 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dp_ex_1 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dp_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dp_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dp_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dp_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dp_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dp_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dp_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dp_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_e0 <= `BSV_ASSIGNMENT_DELAY 50'd0;
	rg_e00 <= `BSV_ASSIGNMENT_DELAY 50'd0;
	rg_e01 <= `BSV_ASSIGNMENT_DELAY 50'd0;
	rg_e011 <= `BSV_ASSIGNMENT_DELAY 50'd0;
	rg_e02 <= `BSV_ASSIGNMENT_DELAY 50'd0;
	rg_e1 <= `BSV_ASSIGNMENT_DELAY 46'd0;
	rg_exc0 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_exc1 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_exc2 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_operands1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_operands10 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_operands11 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_operands2 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_operands3 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_operands3_1 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_operands4 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_operands5 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_operands6 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_operands7 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_operands8 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_operands9 <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_out <= `BSV_ASSIGNMENT_DELAY 69'd0;
	rg_out_1 <= `BSV_ASSIGNMENT_DELAY 69'd0;
	rg_out_2 <= `BSV_ASSIGNMENT_DELAY 69'd0;
	rg_out_3 <= `BSV_ASSIGNMENT_DELAY 69'd0;
	rg_out_d <= `BSV_ASSIGNMENT_DELAY 69'd0;
	rg_partial_product0 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product0_01 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product0_1 <= `BSV_ASSIGNMENT_DELAY 216'd0;
	rg_partial_product1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product1_1 <= `BSV_ASSIGNMENT_DELAY 216'd0;
	rg_partial_product1_11 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product2 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product2_1 <= `BSV_ASSIGNMENT_DELAY 216'd0;
	rg_partial_product2_21 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product3 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product3_1 <= `BSV_ASSIGNMENT_DELAY 216'd0;
	rg_partial_product3_31 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product4 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product4_1 <= `BSV_ASSIGNMENT_DELAY 216'd0;
	rg_partial_product4_41 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product5 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product5_1 <= `BSV_ASSIGNMENT_DELAY 216'd0;
	rg_partial_product5_2 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product5_51 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product6 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product6_1 <= `BSV_ASSIGNMENT_DELAY 216'd0;
	rg_partial_product6_2 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product6_61 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product7 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product7_1 <= `BSV_ASSIGNMENT_DELAY 216'd0;
	rg_partial_product7_2 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product7_71 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product8 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product8_1 <= `BSV_ASSIGNMENT_DELAY 216'd0;
	rg_partial_product8_2 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_partial_product8_81 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_res <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_res1 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_res11 <= `BSV_ASSIGNMENT_DELAY 108'd0;
	rg_s0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_s00 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_s01 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_s02 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_s1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_s11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_x0 <= `BSV_ASSIGNMENT_DELAY 124'd0;
      end
    else
      begin
        if (i1_EN) i1 <= `BSV_ASSIGNMENT_DELAY i1_D_IN;
	if (rg_dp_ex0_EN) rg_dp_ex0 <= `BSV_ASSIGNMENT_DELAY rg_dp_ex0_D_IN;
	if (rg_dp_ex00_EN)
	  rg_dp_ex00 <= `BSV_ASSIGNMENT_DELAY rg_dp_ex00_D_IN;
	if (rg_dp_ex01_EN)
	  rg_dp_ex01 <= `BSV_ASSIGNMENT_DELAY rg_dp_ex01_D_IN;
	if (rg_dp_ex02_EN)
	  rg_dp_ex02 <= `BSV_ASSIGNMENT_DELAY rg_dp_ex02_D_IN;
	if (rg_dp_ex1_EN) rg_dp_ex1 <= `BSV_ASSIGNMENT_DELAY rg_dp_ex1_D_IN;
	if (rg_dp_ex11_EN)
	  rg_dp_ex11 <= `BSV_ASSIGNMENT_DELAY rg_dp_ex11_D_IN;
	if (rg_dp_ex2_EN) rg_dp_ex2 <= `BSV_ASSIGNMENT_DELAY rg_dp_ex2_D_IN;
	if (rg_dp_ex2_d_EN)
	  rg_dp_ex2_d <= `BSV_ASSIGNMENT_DELAY rg_dp_ex2_d_D_IN;
	if (rg_dp_ex3_EN) rg_dp_ex3 <= `BSV_ASSIGNMENT_DELAY rg_dp_ex3_D_IN;
	if (rg_dp_ex4_EN) rg_dp_ex4 <= `BSV_ASSIGNMENT_DELAY rg_dp_ex4_D_IN;
	if (rg_dp_ex_1_EN)
	  rg_dp_ex_1 <= `BSV_ASSIGNMENT_DELAY rg_dp_ex_1_D_IN;
	if (rg_dp_valid_0_EN)
	  rg_dp_valid_0 <= `BSV_ASSIGNMENT_DELAY rg_dp_valid_0_D_IN;
	if (rg_dp_valid_1_EN)
	  rg_dp_valid_1 <= `BSV_ASSIGNMENT_DELAY rg_dp_valid_1_D_IN;
	if (rg_dp_valid_2_EN)
	  rg_dp_valid_2 <= `BSV_ASSIGNMENT_DELAY rg_dp_valid_2_D_IN;
	if (rg_dp_valid_3_EN)
	  rg_dp_valid_3 <= `BSV_ASSIGNMENT_DELAY rg_dp_valid_3_D_IN;
	if (rg_dp_valid_4_EN)
	  rg_dp_valid_4 <= `BSV_ASSIGNMENT_DELAY rg_dp_valid_4_D_IN;
	if (rg_dp_valid_5_EN)
	  rg_dp_valid_5 <= `BSV_ASSIGNMENT_DELAY rg_dp_valid_5_D_IN;
	if (rg_dp_valid_6_EN)
	  rg_dp_valid_6 <= `BSV_ASSIGNMENT_DELAY rg_dp_valid_6_D_IN;
	if (rg_dp_valid_7_EN)
	  rg_dp_valid_7 <= `BSV_ASSIGNMENT_DELAY rg_dp_valid_7_D_IN;
	if (rg_e0_EN) rg_e0 <= `BSV_ASSIGNMENT_DELAY rg_e0_D_IN;
	if (rg_e00_EN) rg_e00 <= `BSV_ASSIGNMENT_DELAY rg_e00_D_IN;
	if (rg_e01_EN) rg_e01 <= `BSV_ASSIGNMENT_DELAY rg_e01_D_IN;
	if (rg_e011_EN) rg_e011 <= `BSV_ASSIGNMENT_DELAY rg_e011_D_IN;
	if (rg_e02_EN) rg_e02 <= `BSV_ASSIGNMENT_DELAY rg_e02_D_IN;
	if (rg_e1_EN) rg_e1 <= `BSV_ASSIGNMENT_DELAY rg_e1_D_IN;
	if (rg_exc0_EN) rg_exc0 <= `BSV_ASSIGNMENT_DELAY rg_exc0_D_IN;
	if (rg_exc1_EN) rg_exc1 <= `BSV_ASSIGNMENT_DELAY rg_exc1_D_IN;
	if (rg_exc2_EN) rg_exc2 <= `BSV_ASSIGNMENT_DELAY rg_exc2_D_IN;
	if (rg_operands1_EN)
	  rg_operands1 <= `BSV_ASSIGNMENT_DELAY rg_operands1_D_IN;
	if (rg_operands10_EN)
	  rg_operands10 <= `BSV_ASSIGNMENT_DELAY rg_operands10_D_IN;
	if (rg_operands11_EN)
	  rg_operands11 <= `BSV_ASSIGNMENT_DELAY rg_operands11_D_IN;
	if (rg_operands2_EN)
	  rg_operands2 <= `BSV_ASSIGNMENT_DELAY rg_operands2_D_IN;
	if (rg_operands3_EN)
	  rg_operands3 <= `BSV_ASSIGNMENT_DELAY rg_operands3_D_IN;
	if (rg_operands3_1_EN)
	  rg_operands3_1 <= `BSV_ASSIGNMENT_DELAY rg_operands3_1_D_IN;
	if (rg_operands4_EN)
	  rg_operands4 <= `BSV_ASSIGNMENT_DELAY rg_operands4_D_IN;
	if (rg_operands5_EN)
	  rg_operands5 <= `BSV_ASSIGNMENT_DELAY rg_operands5_D_IN;
	if (rg_operands6_EN)
	  rg_operands6 <= `BSV_ASSIGNMENT_DELAY rg_operands6_D_IN;
	if (rg_operands7_EN)
	  rg_operands7 <= `BSV_ASSIGNMENT_DELAY rg_operands7_D_IN;
	if (rg_operands8_EN)
	  rg_operands8 <= `BSV_ASSIGNMENT_DELAY rg_operands8_D_IN;
	if (rg_operands9_EN)
	  rg_operands9 <= `BSV_ASSIGNMENT_DELAY rg_operands9_D_IN;
	if (rg_out_EN) rg_out <= `BSV_ASSIGNMENT_DELAY rg_out_D_IN;
	if (rg_out_1_EN) rg_out_1 <= `BSV_ASSIGNMENT_DELAY rg_out_1_D_IN;
	if (rg_out_2_EN) rg_out_2 <= `BSV_ASSIGNMENT_DELAY rg_out_2_D_IN;
	if (rg_out_3_EN) rg_out_3 <= `BSV_ASSIGNMENT_DELAY rg_out_3_D_IN;
	if (rg_out_d_EN) rg_out_d <= `BSV_ASSIGNMENT_DELAY rg_out_d_D_IN;
	if (rg_partial_product0_EN)
	  rg_partial_product0 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product0_D_IN;
	if (rg_partial_product0_01_EN)
	  rg_partial_product0_01 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product0_01_D_IN;
	if (rg_partial_product0_1_EN)
	  rg_partial_product0_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product0_1_D_IN;
	if (rg_partial_product1_EN)
	  rg_partial_product1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product1_D_IN;
	if (rg_partial_product1_1_EN)
	  rg_partial_product1_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product1_1_D_IN;
	if (rg_partial_product1_11_EN)
	  rg_partial_product1_11 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product1_11_D_IN;
	if (rg_partial_product2_EN)
	  rg_partial_product2 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product2_D_IN;
	if (rg_partial_product2_1_EN)
	  rg_partial_product2_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product2_1_D_IN;
	if (rg_partial_product2_21_EN)
	  rg_partial_product2_21 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product2_21_D_IN;
	if (rg_partial_product3_EN)
	  rg_partial_product3 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product3_D_IN;
	if (rg_partial_product3_1_EN)
	  rg_partial_product3_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product3_1_D_IN;
	if (rg_partial_product3_31_EN)
	  rg_partial_product3_31 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product3_31_D_IN;
	if (rg_partial_product4_EN)
	  rg_partial_product4 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product4_D_IN;
	if (rg_partial_product4_1_EN)
	  rg_partial_product4_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product4_1_D_IN;
	if (rg_partial_product4_41_EN)
	  rg_partial_product4_41 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product4_41_D_IN;
	if (rg_partial_product5_EN)
	  rg_partial_product5 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product5_D_IN;
	if (rg_partial_product5_1_EN)
	  rg_partial_product5_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product5_1_D_IN;
	if (rg_partial_product5_2_EN)
	  rg_partial_product5_2 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product5_2_D_IN;
	if (rg_partial_product5_51_EN)
	  rg_partial_product5_51 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product5_51_D_IN;
	if (rg_partial_product6_EN)
	  rg_partial_product6 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product6_D_IN;
	if (rg_partial_product6_1_EN)
	  rg_partial_product6_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product6_1_D_IN;
	if (rg_partial_product6_2_EN)
	  rg_partial_product6_2 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product6_2_D_IN;
	if (rg_partial_product6_61_EN)
	  rg_partial_product6_61 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product6_61_D_IN;
	if (rg_partial_product7_EN)
	  rg_partial_product7 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product7_D_IN;
	if (rg_partial_product7_1_EN)
	  rg_partial_product7_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product7_1_D_IN;
	if (rg_partial_product7_2_EN)
	  rg_partial_product7_2 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product7_2_D_IN;
	if (rg_partial_product7_71_EN)
	  rg_partial_product7_71 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product7_71_D_IN;
	if (rg_partial_product8_EN)
	  rg_partial_product8 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product8_D_IN;
	if (rg_partial_product8_1_EN)
	  rg_partial_product8_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product8_1_D_IN;
	if (rg_partial_product8_2_EN)
	  rg_partial_product8_2 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product8_2_D_IN;
	if (rg_partial_product8_81_EN)
	  rg_partial_product8_81 <= `BSV_ASSIGNMENT_DELAY
	      rg_partial_product8_81_D_IN;
	if (rg_res_EN) rg_res <= `BSV_ASSIGNMENT_DELAY rg_res_D_IN;
	if (rg_res1_EN) rg_res1 <= `BSV_ASSIGNMENT_DELAY rg_res1_D_IN;
	if (rg_res11_EN) rg_res11 <= `BSV_ASSIGNMENT_DELAY rg_res11_D_IN;
	if (rg_s0_EN) rg_s0 <= `BSV_ASSIGNMENT_DELAY rg_s0_D_IN;
	if (rg_s00_EN) rg_s00 <= `BSV_ASSIGNMENT_DELAY rg_s00_D_IN;
	if (rg_s01_EN) rg_s01 <= `BSV_ASSIGNMENT_DELAY rg_s01_D_IN;
	if (rg_s02_EN) rg_s02 <= `BSV_ASSIGNMENT_DELAY rg_s02_D_IN;
	if (rg_s1_EN) rg_s1 <= `BSV_ASSIGNMENT_DELAY rg_s1_D_IN;
	if (rg_s11_EN) rg_s11 <= `BSV_ASSIGNMENT_DELAY rg_s11_D_IN;
	if (rg_x0_EN) rg_x0 <= `BSV_ASSIGNMENT_DELAY rg_x0_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    i1 = 32'hAAAAAAAA;
    rg_dp_ex0 = 3'h2;
    rg_dp_ex00 = 3'h2;
    rg_dp_ex01 = 3'h2;
    rg_dp_ex02 = 3'h2;
    rg_dp_ex1 = 3'h2;
    rg_dp_ex11 = 3'h2;
    rg_dp_ex2 = 3'h2;
    rg_dp_ex2_d = 3'h2;
    rg_dp_ex3 = 3'h2;
    rg_dp_ex4 = 3'h2;
    rg_dp_ex_1 = 3'h2;
    rg_dp_valid_0 = 1'h0;
    rg_dp_valid_1 = 1'h0;
    rg_dp_valid_2 = 1'h0;
    rg_dp_valid_3 = 1'h0;
    rg_dp_valid_4 = 1'h0;
    rg_dp_valid_5 = 1'h0;
    rg_dp_valid_6 = 1'h0;
    rg_dp_valid_7 = 1'h0;
    rg_e0 = 50'h2AAAAAAAAAAAA;
    rg_e00 = 50'h2AAAAAAAAAAAA;
    rg_e01 = 50'h2AAAAAAAAAAAA;
    rg_e011 = 50'h2AAAAAAAAAAAA;
    rg_e02 = 50'h2AAAAAAAAAAAA;
    rg_e1 = 46'h2AAAAAAAAAAA;
    rg_exc0 = 5'h0A;
    rg_exc1 = 5'h0A;
    rg_exc2 = 5'h0A;
    rg_operands1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_operands10 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_operands11 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_operands2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_operands3 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_operands3_1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_operands4 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_operands5 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_operands6 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_operands7 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_operands8 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_operands9 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_out = 69'h0AAAAAAAAAAAAAAAAA;
    rg_out_1 = 69'h0AAAAAAAAAAAAAAAAA;
    rg_out_2 = 69'h0AAAAAAAAAAAAAAAAA;
    rg_out_3 = 69'h0AAAAAAAAAAAAAAAAA;
    rg_out_d = 69'h0AAAAAAAAAAAAAAAAA;
    rg_partial_product0 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product0_01 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product0_1 =
	216'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product1_1 =
	216'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product1_11 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product2 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product2_1 =
	216'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product2_21 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product3 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product3_1 =
	216'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product3_31 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product4 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product4_1 =
	216'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product4_41 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product5 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product5_1 =
	216'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product5_2 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product5_51 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product6 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product6_1 =
	216'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product6_2 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product6_61 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product7 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product7_1 =
	216'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product7_2 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product7_71 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product8 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product8_1 =
	216'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product8_2 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_partial_product8_81 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_res = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_res1 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_res11 = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_s0 = 1'h0;
    rg_s00 = 1'h0;
    rg_s01 = 1'h0;
    rg_s02 = 1'h0;
    rg_s1 = 1'h0;
    rg_s11 = 1'h0;
    rg_x0 = 124'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mk_dpfpmult

